
HarnessTester_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002908  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080029c4  080029c4  000039c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f4  080029f4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080029f4  080029f4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029f4  080029f4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f4  080029f4  000039f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f8  080029f8  000039f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002a08  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002a08  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000623b  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001594  00000000  00000000  0000a26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000507  00000000  00000000  0000bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fda1  00000000  00000000  0000c3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098a9  00000000  00000000  0001c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fe93  00000000  00000000  000259f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008588c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016e8  00000000  00000000  000858d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00086fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080029ac 	.word	0x080029ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080029ac 	.word	0x080029ac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_fmul>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	464f      	mov	r7, r9
 8000220:	4646      	mov	r6, r8
 8000222:	46d6      	mov	lr, sl
 8000224:	0243      	lsls	r3, r0, #9
 8000226:	0a5b      	lsrs	r3, r3, #9
 8000228:	0045      	lsls	r5, r0, #1
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	4699      	mov	r9, r3
 800022e:	1c0f      	adds	r7, r1, #0
 8000230:	0e2d      	lsrs	r5, r5, #24
 8000232:	0fc6      	lsrs	r6, r0, #31
 8000234:	2d00      	cmp	r5, #0
 8000236:	d100      	bne.n	800023a <__aeabi_fmul+0x1e>
 8000238:	e088      	b.n	800034c <__aeabi_fmul+0x130>
 800023a:	2dff      	cmp	r5, #255	@ 0xff
 800023c:	d100      	bne.n	8000240 <__aeabi_fmul+0x24>
 800023e:	e08d      	b.n	800035c <__aeabi_fmul+0x140>
 8000240:	2280      	movs	r2, #128	@ 0x80
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	04d2      	lsls	r2, r2, #19
 8000246:	431a      	orrs	r2, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4691      	mov	r9, r2
 800024c:	4698      	mov	r8, r3
 800024e:	469a      	mov	sl, r3
 8000250:	3d7f      	subs	r5, #127	@ 0x7f
 8000252:	027c      	lsls	r4, r7, #9
 8000254:	007b      	lsls	r3, r7, #1
 8000256:	0a64      	lsrs	r4, r4, #9
 8000258:	0e1b      	lsrs	r3, r3, #24
 800025a:	0fff      	lsrs	r7, r7, #31
 800025c:	2b00      	cmp	r3, #0
 800025e:	d068      	beq.n	8000332 <__aeabi_fmul+0x116>
 8000260:	2bff      	cmp	r3, #255	@ 0xff
 8000262:	d021      	beq.n	80002a8 <__aeabi_fmul+0x8c>
 8000264:	2280      	movs	r2, #128	@ 0x80
 8000266:	00e4      	lsls	r4, r4, #3
 8000268:	04d2      	lsls	r2, r2, #19
 800026a:	4314      	orrs	r4, r2
 800026c:	4642      	mov	r2, r8
 800026e:	3b7f      	subs	r3, #127	@ 0x7f
 8000270:	195b      	adds	r3, r3, r5
 8000272:	2100      	movs	r1, #0
 8000274:	1c5d      	adds	r5, r3, #1
 8000276:	2a0a      	cmp	r2, #10
 8000278:	dc2e      	bgt.n	80002d8 <__aeabi_fmul+0xbc>
 800027a:	407e      	eors	r6, r7
 800027c:	4642      	mov	r2, r8
 800027e:	2a02      	cmp	r2, #2
 8000280:	dc23      	bgt.n	80002ca <__aeabi_fmul+0xae>
 8000282:	3a01      	subs	r2, #1
 8000284:	2a01      	cmp	r2, #1
 8000286:	d900      	bls.n	800028a <__aeabi_fmul+0x6e>
 8000288:	e0bd      	b.n	8000406 <__aeabi_fmul+0x1ea>
 800028a:	2902      	cmp	r1, #2
 800028c:	d06e      	beq.n	800036c <__aeabi_fmul+0x150>
 800028e:	2901      	cmp	r1, #1
 8000290:	d12c      	bne.n	80002ec <__aeabi_fmul+0xd0>
 8000292:	2000      	movs	r0, #0
 8000294:	2200      	movs	r2, #0
 8000296:	05c0      	lsls	r0, r0, #23
 8000298:	07f6      	lsls	r6, r6, #31
 800029a:	4310      	orrs	r0, r2
 800029c:	4330      	orrs	r0, r6
 800029e:	bce0      	pop	{r5, r6, r7}
 80002a0:	46ba      	mov	sl, r7
 80002a2:	46b1      	mov	r9, r6
 80002a4:	46a8      	mov	r8, r5
 80002a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002a8:	002b      	movs	r3, r5
 80002aa:	33ff      	adds	r3, #255	@ 0xff
 80002ac:	2c00      	cmp	r4, #0
 80002ae:	d065      	beq.n	800037c <__aeabi_fmul+0x160>
 80002b0:	2203      	movs	r2, #3
 80002b2:	4641      	mov	r1, r8
 80002b4:	4311      	orrs	r1, r2
 80002b6:	0032      	movs	r2, r6
 80002b8:	3501      	adds	r5, #1
 80002ba:	4688      	mov	r8, r1
 80002bc:	407a      	eors	r2, r7
 80002be:	35ff      	adds	r5, #255	@ 0xff
 80002c0:	290a      	cmp	r1, #10
 80002c2:	dd00      	ble.n	80002c6 <__aeabi_fmul+0xaa>
 80002c4:	e0d8      	b.n	8000478 <__aeabi_fmul+0x25c>
 80002c6:	0016      	movs	r6, r2
 80002c8:	2103      	movs	r1, #3
 80002ca:	4640      	mov	r0, r8
 80002cc:	2201      	movs	r2, #1
 80002ce:	4082      	lsls	r2, r0
 80002d0:	20a6      	movs	r0, #166	@ 0xa6
 80002d2:	00c0      	lsls	r0, r0, #3
 80002d4:	4202      	tst	r2, r0
 80002d6:	d020      	beq.n	800031a <__aeabi_fmul+0xfe>
 80002d8:	4653      	mov	r3, sl
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d046      	beq.n	800036c <__aeabi_fmul+0x150>
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fmul+0xc8>
 80002e2:	e0bb      	b.n	800045c <__aeabi_fmul+0x240>
 80002e4:	4651      	mov	r1, sl
 80002e6:	464c      	mov	r4, r9
 80002e8:	2901      	cmp	r1, #1
 80002ea:	d0d2      	beq.n	8000292 <__aeabi_fmul+0x76>
 80002ec:	002b      	movs	r3, r5
 80002ee:	337f      	adds	r3, #127	@ 0x7f
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	dd70      	ble.n	80003d6 <__aeabi_fmul+0x1ba>
 80002f4:	0762      	lsls	r2, r4, #29
 80002f6:	d004      	beq.n	8000302 <__aeabi_fmul+0xe6>
 80002f8:	220f      	movs	r2, #15
 80002fa:	4022      	ands	r2, r4
 80002fc:	2a04      	cmp	r2, #4
 80002fe:	d000      	beq.n	8000302 <__aeabi_fmul+0xe6>
 8000300:	3404      	adds	r4, #4
 8000302:	0122      	lsls	r2, r4, #4
 8000304:	d503      	bpl.n	800030e <__aeabi_fmul+0xf2>
 8000306:	4b63      	ldr	r3, [pc, #396]	@ (8000494 <__aeabi_fmul+0x278>)
 8000308:	401c      	ands	r4, r3
 800030a:	002b      	movs	r3, r5
 800030c:	3380      	adds	r3, #128	@ 0x80
 800030e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000310:	dc2c      	bgt.n	800036c <__aeabi_fmul+0x150>
 8000312:	01a2      	lsls	r2, r4, #6
 8000314:	0a52      	lsrs	r2, r2, #9
 8000316:	b2d8      	uxtb	r0, r3
 8000318:	e7bd      	b.n	8000296 <__aeabi_fmul+0x7a>
 800031a:	2090      	movs	r0, #144	@ 0x90
 800031c:	0080      	lsls	r0, r0, #2
 800031e:	4202      	tst	r2, r0
 8000320:	d127      	bne.n	8000372 <__aeabi_fmul+0x156>
 8000322:	38b9      	subs	r0, #185	@ 0xb9
 8000324:	38ff      	subs	r0, #255	@ 0xff
 8000326:	4210      	tst	r0, r2
 8000328:	d06d      	beq.n	8000406 <__aeabi_fmul+0x1ea>
 800032a:	003e      	movs	r6, r7
 800032c:	46a1      	mov	r9, r4
 800032e:	468a      	mov	sl, r1
 8000330:	e7d2      	b.n	80002d8 <__aeabi_fmul+0xbc>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d141      	bne.n	80003ba <__aeabi_fmul+0x19e>
 8000336:	2301      	movs	r3, #1
 8000338:	4642      	mov	r2, r8
 800033a:	431a      	orrs	r2, r3
 800033c:	4690      	mov	r8, r2
 800033e:	002b      	movs	r3, r5
 8000340:	4642      	mov	r2, r8
 8000342:	2101      	movs	r1, #1
 8000344:	1c5d      	adds	r5, r3, #1
 8000346:	2a0a      	cmp	r2, #10
 8000348:	dd97      	ble.n	800027a <__aeabi_fmul+0x5e>
 800034a:	e7c5      	b.n	80002d8 <__aeabi_fmul+0xbc>
 800034c:	2b00      	cmp	r3, #0
 800034e:	d126      	bne.n	800039e <__aeabi_fmul+0x182>
 8000350:	2304      	movs	r3, #4
 8000352:	4698      	mov	r8, r3
 8000354:	3b03      	subs	r3, #3
 8000356:	2500      	movs	r5, #0
 8000358:	469a      	mov	sl, r3
 800035a:	e77a      	b.n	8000252 <__aeabi_fmul+0x36>
 800035c:	2b00      	cmp	r3, #0
 800035e:	d118      	bne.n	8000392 <__aeabi_fmul+0x176>
 8000360:	2308      	movs	r3, #8
 8000362:	4698      	mov	r8, r3
 8000364:	3b06      	subs	r3, #6
 8000366:	25ff      	movs	r5, #255	@ 0xff
 8000368:	469a      	mov	sl, r3
 800036a:	e772      	b.n	8000252 <__aeabi_fmul+0x36>
 800036c:	20ff      	movs	r0, #255	@ 0xff
 800036e:	2200      	movs	r2, #0
 8000370:	e791      	b.n	8000296 <__aeabi_fmul+0x7a>
 8000372:	2280      	movs	r2, #128	@ 0x80
 8000374:	2600      	movs	r6, #0
 8000376:	20ff      	movs	r0, #255	@ 0xff
 8000378:	03d2      	lsls	r2, r2, #15
 800037a:	e78c      	b.n	8000296 <__aeabi_fmul+0x7a>
 800037c:	4641      	mov	r1, r8
 800037e:	2202      	movs	r2, #2
 8000380:	3501      	adds	r5, #1
 8000382:	4311      	orrs	r1, r2
 8000384:	4688      	mov	r8, r1
 8000386:	35ff      	adds	r5, #255	@ 0xff
 8000388:	290a      	cmp	r1, #10
 800038a:	dca5      	bgt.n	80002d8 <__aeabi_fmul+0xbc>
 800038c:	2102      	movs	r1, #2
 800038e:	407e      	eors	r6, r7
 8000390:	e774      	b.n	800027c <__aeabi_fmul+0x60>
 8000392:	230c      	movs	r3, #12
 8000394:	4698      	mov	r8, r3
 8000396:	3b09      	subs	r3, #9
 8000398:	25ff      	movs	r5, #255	@ 0xff
 800039a:	469a      	mov	sl, r3
 800039c:	e759      	b.n	8000252 <__aeabi_fmul+0x36>
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 f8c6 	bl	8000530 <__clzsi2>
 80003a4:	464a      	mov	r2, r9
 80003a6:	1f43      	subs	r3, r0, #5
 80003a8:	2576      	movs	r5, #118	@ 0x76
 80003aa:	409a      	lsls	r2, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	426d      	negs	r5, r5
 80003b0:	4691      	mov	r9, r2
 80003b2:	4698      	mov	r8, r3
 80003b4:	469a      	mov	sl, r3
 80003b6:	1a2d      	subs	r5, r5, r0
 80003b8:	e74b      	b.n	8000252 <__aeabi_fmul+0x36>
 80003ba:	0020      	movs	r0, r4
 80003bc:	f000 f8b8 	bl	8000530 <__clzsi2>
 80003c0:	4642      	mov	r2, r8
 80003c2:	1f43      	subs	r3, r0, #5
 80003c4:	409c      	lsls	r4, r3
 80003c6:	1a2b      	subs	r3, r5, r0
 80003c8:	3b76      	subs	r3, #118	@ 0x76
 80003ca:	2100      	movs	r1, #0
 80003cc:	1c5d      	adds	r5, r3, #1
 80003ce:	2a0a      	cmp	r2, #10
 80003d0:	dc00      	bgt.n	80003d4 <__aeabi_fmul+0x1b8>
 80003d2:	e752      	b.n	800027a <__aeabi_fmul+0x5e>
 80003d4:	e780      	b.n	80002d8 <__aeabi_fmul+0xbc>
 80003d6:	2201      	movs	r2, #1
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	2b1b      	cmp	r3, #27
 80003dc:	dd00      	ble.n	80003e0 <__aeabi_fmul+0x1c4>
 80003de:	e758      	b.n	8000292 <__aeabi_fmul+0x76>
 80003e0:	359e      	adds	r5, #158	@ 0x9e
 80003e2:	0022      	movs	r2, r4
 80003e4:	40ac      	lsls	r4, r5
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	1e63      	subs	r3, r4, #1
 80003ea:	419c      	sbcs	r4, r3
 80003ec:	4322      	orrs	r2, r4
 80003ee:	0753      	lsls	r3, r2, #29
 80003f0:	d004      	beq.n	80003fc <__aeabi_fmul+0x1e0>
 80003f2:	230f      	movs	r3, #15
 80003f4:	4013      	ands	r3, r2
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d000      	beq.n	80003fc <__aeabi_fmul+0x1e0>
 80003fa:	3204      	adds	r2, #4
 80003fc:	0153      	lsls	r3, r2, #5
 80003fe:	d537      	bpl.n	8000470 <__aeabi_fmul+0x254>
 8000400:	2001      	movs	r0, #1
 8000402:	2200      	movs	r2, #0
 8000404:	e747      	b.n	8000296 <__aeabi_fmul+0x7a>
 8000406:	0c21      	lsrs	r1, r4, #16
 8000408:	464a      	mov	r2, r9
 800040a:	0424      	lsls	r4, r4, #16
 800040c:	0c24      	lsrs	r4, r4, #16
 800040e:	0027      	movs	r7, r4
 8000410:	0c10      	lsrs	r0, r2, #16
 8000412:	0412      	lsls	r2, r2, #16
 8000414:	0c12      	lsrs	r2, r2, #16
 8000416:	4344      	muls	r4, r0
 8000418:	4357      	muls	r7, r2
 800041a:	4348      	muls	r0, r1
 800041c:	4351      	muls	r1, r2
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	1909      	adds	r1, r1, r4
 8000422:	1852      	adds	r2, r2, r1
 8000424:	4294      	cmp	r4, r2
 8000426:	d903      	bls.n	8000430 <__aeabi_fmul+0x214>
 8000428:	2180      	movs	r1, #128	@ 0x80
 800042a:	0249      	lsls	r1, r1, #9
 800042c:	468c      	mov	ip, r1
 800042e:	4460      	add	r0, ip
 8000430:	043f      	lsls	r7, r7, #16
 8000432:	0411      	lsls	r1, r2, #16
 8000434:	0c3f      	lsrs	r7, r7, #16
 8000436:	19c9      	adds	r1, r1, r7
 8000438:	018c      	lsls	r4, r1, #6
 800043a:	1e67      	subs	r7, r4, #1
 800043c:	41bc      	sbcs	r4, r7
 800043e:	0c12      	lsrs	r2, r2, #16
 8000440:	0e89      	lsrs	r1, r1, #26
 8000442:	1812      	adds	r2, r2, r0
 8000444:	430c      	orrs	r4, r1
 8000446:	0192      	lsls	r2, r2, #6
 8000448:	4314      	orrs	r4, r2
 800044a:	0112      	lsls	r2, r2, #4
 800044c:	d50e      	bpl.n	800046c <__aeabi_fmul+0x250>
 800044e:	2301      	movs	r3, #1
 8000450:	0862      	lsrs	r2, r4, #1
 8000452:	401c      	ands	r4, r3
 8000454:	4314      	orrs	r4, r2
 8000456:	e749      	b.n	80002ec <__aeabi_fmul+0xd0>
 8000458:	003e      	movs	r6, r7
 800045a:	46a1      	mov	r9, r4
 800045c:	2280      	movs	r2, #128	@ 0x80
 800045e:	464b      	mov	r3, r9
 8000460:	03d2      	lsls	r2, r2, #15
 8000462:	431a      	orrs	r2, r3
 8000464:	0252      	lsls	r2, r2, #9
 8000466:	20ff      	movs	r0, #255	@ 0xff
 8000468:	0a52      	lsrs	r2, r2, #9
 800046a:	e714      	b.n	8000296 <__aeabi_fmul+0x7a>
 800046c:	001d      	movs	r5, r3
 800046e:	e73d      	b.n	80002ec <__aeabi_fmul+0xd0>
 8000470:	0192      	lsls	r2, r2, #6
 8000472:	2000      	movs	r0, #0
 8000474:	0a52      	lsrs	r2, r2, #9
 8000476:	e70e      	b.n	8000296 <__aeabi_fmul+0x7a>
 8000478:	290f      	cmp	r1, #15
 800047a:	d1ed      	bne.n	8000458 <__aeabi_fmul+0x23c>
 800047c:	2280      	movs	r2, #128	@ 0x80
 800047e:	464b      	mov	r3, r9
 8000480:	03d2      	lsls	r2, r2, #15
 8000482:	4213      	tst	r3, r2
 8000484:	d0ea      	beq.n	800045c <__aeabi_fmul+0x240>
 8000486:	4214      	tst	r4, r2
 8000488:	d1e8      	bne.n	800045c <__aeabi_fmul+0x240>
 800048a:	003e      	movs	r6, r7
 800048c:	20ff      	movs	r0, #255	@ 0xff
 800048e:	4322      	orrs	r2, r4
 8000490:	e701      	b.n	8000296 <__aeabi_fmul+0x7a>
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	f7ffffff 	.word	0xf7ffffff

08000498 <__aeabi_i2f>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	2800      	cmp	r0, #0
 800049c:	d013      	beq.n	80004c6 <__aeabi_i2f+0x2e>
 800049e:	17c3      	asrs	r3, r0, #31
 80004a0:	18c5      	adds	r5, r0, r3
 80004a2:	405d      	eors	r5, r3
 80004a4:	0fc4      	lsrs	r4, r0, #31
 80004a6:	0028      	movs	r0, r5
 80004a8:	f000 f842 	bl	8000530 <__clzsi2>
 80004ac:	239e      	movs	r3, #158	@ 0x9e
 80004ae:	0001      	movs	r1, r0
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	2b96      	cmp	r3, #150	@ 0x96
 80004b4:	dc0f      	bgt.n	80004d6 <__aeabi_i2f+0x3e>
 80004b6:	2808      	cmp	r0, #8
 80004b8:	d034      	beq.n	8000524 <__aeabi_i2f+0x8c>
 80004ba:	3908      	subs	r1, #8
 80004bc:	408d      	lsls	r5, r1
 80004be:	026d      	lsls	r5, r5, #9
 80004c0:	0a6d      	lsrs	r5, r5, #9
 80004c2:	b2d8      	uxtb	r0, r3
 80004c4:	e002      	b.n	80004cc <__aeabi_i2f+0x34>
 80004c6:	2400      	movs	r4, #0
 80004c8:	2000      	movs	r0, #0
 80004ca:	2500      	movs	r5, #0
 80004cc:	05c0      	lsls	r0, r0, #23
 80004ce:	4328      	orrs	r0, r5
 80004d0:	07e4      	lsls	r4, r4, #31
 80004d2:	4320      	orrs	r0, r4
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	2b99      	cmp	r3, #153	@ 0x99
 80004d8:	dc16      	bgt.n	8000508 <__aeabi_i2f+0x70>
 80004da:	1f42      	subs	r2, r0, #5
 80004dc:	2805      	cmp	r0, #5
 80004de:	d000      	beq.n	80004e2 <__aeabi_i2f+0x4a>
 80004e0:	4095      	lsls	r5, r2
 80004e2:	002a      	movs	r2, r5
 80004e4:	4811      	ldr	r0, [pc, #68]	@ (800052c <__aeabi_i2f+0x94>)
 80004e6:	4002      	ands	r2, r0
 80004e8:	076e      	lsls	r6, r5, #29
 80004ea:	d009      	beq.n	8000500 <__aeabi_i2f+0x68>
 80004ec:	260f      	movs	r6, #15
 80004ee:	4035      	ands	r5, r6
 80004f0:	2d04      	cmp	r5, #4
 80004f2:	d005      	beq.n	8000500 <__aeabi_i2f+0x68>
 80004f4:	3204      	adds	r2, #4
 80004f6:	0155      	lsls	r5, r2, #5
 80004f8:	d502      	bpl.n	8000500 <__aeabi_i2f+0x68>
 80004fa:	239f      	movs	r3, #159	@ 0x9f
 80004fc:	4002      	ands	r2, r0
 80004fe:	1a5b      	subs	r3, r3, r1
 8000500:	0192      	lsls	r2, r2, #6
 8000502:	0a55      	lsrs	r5, r2, #9
 8000504:	b2d8      	uxtb	r0, r3
 8000506:	e7e1      	b.n	80004cc <__aeabi_i2f+0x34>
 8000508:	2205      	movs	r2, #5
 800050a:	1a12      	subs	r2, r2, r0
 800050c:	0028      	movs	r0, r5
 800050e:	40d0      	lsrs	r0, r2
 8000510:	0002      	movs	r2, r0
 8000512:	0008      	movs	r0, r1
 8000514:	301b      	adds	r0, #27
 8000516:	4085      	lsls	r5, r0
 8000518:	0028      	movs	r0, r5
 800051a:	1e45      	subs	r5, r0, #1
 800051c:	41a8      	sbcs	r0, r5
 800051e:	4302      	orrs	r2, r0
 8000520:	0015      	movs	r5, r2
 8000522:	e7de      	b.n	80004e2 <__aeabi_i2f+0x4a>
 8000524:	026d      	lsls	r5, r5, #9
 8000526:	2096      	movs	r0, #150	@ 0x96
 8000528:	0a6d      	lsrs	r5, r5, #9
 800052a:	e7cf      	b.n	80004cc <__aeabi_i2f+0x34>
 800052c:	fbffffff 	.word	0xfbffffff

08000530 <__clzsi2>:
 8000530:	211c      	movs	r1, #28
 8000532:	2301      	movs	r3, #1
 8000534:	041b      	lsls	r3, r3, #16
 8000536:	4298      	cmp	r0, r3
 8000538:	d301      	bcc.n	800053e <__clzsi2+0xe>
 800053a:	0c00      	lsrs	r0, r0, #16
 800053c:	3910      	subs	r1, #16
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	4298      	cmp	r0, r3
 8000542:	d301      	bcc.n	8000548 <__clzsi2+0x18>
 8000544:	0a00      	lsrs	r0, r0, #8
 8000546:	3908      	subs	r1, #8
 8000548:	091b      	lsrs	r3, r3, #4
 800054a:	4298      	cmp	r0, r3
 800054c:	d301      	bcc.n	8000552 <__clzsi2+0x22>
 800054e:	0900      	lsrs	r0, r0, #4
 8000550:	3904      	subs	r1, #4
 8000552:	a202      	add	r2, pc, #8	@ (adr r2, 800055c <__clzsi2+0x2c>)
 8000554:	5c10      	ldrb	r0, [r2, r0]
 8000556:	1840      	adds	r0, r0, r1
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	02020304 	.word	0x02020304
 8000560:	01010101 	.word	0x01010101
	...

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b090      	sub	sp, #64	@ 0x40
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fc1b 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f84d 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8e3 	bl	8000744 <MX_GPIO_Init>
  MX_I2C1_Init();
 800057e:	f000 f8a1 	bl	80006c4 <MX_I2C1_Init>
//	 comlog.HwFlowCtl = COM_HWCONTROL_NONE;
//
////	 BSP_COM_Init(COM1, &comlog);
//
//	 printf("Hello World!");
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //output pin
 8000582:	2390      	movs	r3, #144	@ 0x90
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	2201      	movs	r2, #1
 8000588:	2104      	movs	r1, #4
 800058a:	0018      	movs	r0, r3
 800058c:	f000 feba 	bl	8001304 <HAL_GPIO_WritePin>
	 //mux(0b0010, 0b0000, 0);

	 //Small Test 01 - Mobo Only (Single connect)
	 //Connections:  O_X7 -> I_X7 (X6-X7 is still not working, trying X7)
	 float* cont_array[15];
	 bool yah = false;
 8000590:	233e      	movs	r3, #62	@ 0x3e
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
	 mux(0b0110, 0b0000, 1); //X6
 8000598:	2201      	movs	r2, #1
 800059a:	2100      	movs	r1, #0
 800059c:	2006      	movs	r0, #6
 800059e:	f000 f98a 	bl	80008b6 <mux>
	 HAL_Delay(20);
 80005a2:	2014      	movs	r0, #20
 80005a4:	f000 fc66 	bl	8000e74 <HAL_Delay>
	 mux(0b0110, 0b0000, 0); //X6
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	2006      	movs	r0, #6
 80005ae:	f000 f982 	bl	80008b6 <mux>
	 // Test reading ADS1115 channels
	 HAL_Delay(100);
 80005b2:	2064      	movs	r0, #100	@ 0x64
 80005b4:	f000 fc5e 	bl	8000e74 <HAL_Delay>
     cont_array[0] = contDetect();
 80005b8:	f000 faa6 	bl	8000b08 <contDetect>
 80005bc:	0002      	movs	r2, r0
 80005be:	003b      	movs	r3, r7
 80005c0:	601a      	str	r2, [r3, #0]

	 for (uint8_t i = 0; i < 15; i++) {
 80005c2:	233f      	movs	r3, #63	@ 0x3f
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e019      	b.n	8000600 <main+0x94>
	   mux(Binary4Bit(i), 0b0000, 1);
 80005cc:	243f      	movs	r4, #63	@ 0x3f
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f94e 	bl	8000874 <Binary4Bit>
 80005d8:	0003      	movs	r3, r0
 80005da:	2201      	movs	r2, #1
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 f969 	bl	80008b6 <mux>
	   cont_array[i] = contDetect();
 80005e4:	0025      	movs	r5, r4
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	781c      	ldrb	r4, [r3, #0]
 80005ea:	f000 fa8d 	bl	8000b08 <contDetect>
 80005ee:	0001      	movs	r1, r0
 80005f0:	003b      	movs	r3, r7
 80005f2:	00a2      	lsls	r2, r4, #2
 80005f4:	50d1      	str	r1, [r2, r3]
	 for (uint8_t i = 0; i < 15; i++) {
 80005f6:	197b      	adds	r3, r7, r5
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	197b      	adds	r3, r7, r5
 80005fc:	3201      	adds	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	233f      	movs	r3, #63	@ 0x3f
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b0e      	cmp	r3, #14
 8000608:	d9e0      	bls.n	80005cc <main+0x60>
 800060a:	2300      	movs	r3, #0
/**
  * @brief System Clock Configuration
  * @retval None
  */

}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	b010      	add	sp, #64	@ 0x40
 8000612:	bdb0      	pop	{r4, r5, r7, pc}

08000614 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b095      	sub	sp, #84	@ 0x54
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	2420      	movs	r4, #32
 800061c:	193b      	adds	r3, r7, r4
 800061e:	0018      	movs	r0, r3
 8000620:	2330      	movs	r3, #48	@ 0x30
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f002 f995 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062a:	2310      	movs	r3, #16
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	0018      	movs	r0, r3
 8000630:	2310      	movs	r3, #16
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f002 f98d 	bl	8002954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063a:	003b      	movs	r3, r7
 800063c:	0018      	movs	r0, r3
 800063e:	2310      	movs	r3, #16
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f002 f986 	bl	8002954 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	0021      	movs	r1, r4
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2202      	movs	r2, #2
 800064e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2210      	movs	r2, #16
 800065a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	187b      	adds	r3, r7, r1
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fc63 	bl	8001f30 <HAL_RCC_OscConfig>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800066e:	f000 fadd 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	2110      	movs	r1, #16
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2207      	movs	r2, #7
 8000678:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2100      	movs	r1, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f001 ff6b 	bl	800256c <HAL_RCC_ClockConfig>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800069a:	f000 fac7 	bl	8000c2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2220      	movs	r2, #32
 80006a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006aa:	003b      	movs	r3, r7
 80006ac:	0018      	movs	r0, r3
 80006ae:	f002 f883 	bl	80027b8 <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006b6:	f000 fab9 	bl	8000c2c <Error_Handler>
  }
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b015      	add	sp, #84	@ 0x54
 80006c0:	bd90      	pop	{r4, r7, pc}
	...

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <MX_I2C1_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x2000090E;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000740 <MX_I2C1_Init+0x7c>)
 80006d2:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fe1d 	bl	8001340 <HAL_I2C_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x4a>
	  {
		Error_Handler();
 800070a:	f000 fa8f 	bl	8000c2c <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000710:	2100      	movs	r1, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fb74 	bl	8001e00 <HAL_I2CEx_ConfigAnalogFilter>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x5c>
	  {
		Error_Handler();
 800071c:	f000 fa86 	bl	8000c2c <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000722:	2100      	movs	r1, #0
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fbb7 	bl	8001e98 <HAL_I2CEx_ConfigDigitalFilter>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x6e>
	  {
		Error_Handler();
 800072e:	f000 fa7d 	bl	8000c2c <Error_Handler>

  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000040 	.word	0x20000040
 800073c:	40005400 	.word	0x40005400
 8000740:	2000090e 	.word	0x2000090e

08000744 <MX_GPIO_Init>:
  */
/* USER CODE BEGIN MX_GPIO_Init_1 */


static void MX_GPIO_Init(void)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b089      	sub	sp, #36	@ 0x24
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	240c      	movs	r4, #12
 800074c:	193b      	adds	r3, r7, r4
 800074e:	0018      	movs	r0, r3
 8000750:	2314      	movs	r3, #20
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f002 f8fd 	bl	8002954 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075a:	4b42      	ldr	r3, [pc, #264]	@ (8000864 <MX_GPIO_Init+0x120>)
 800075c:	695a      	ldr	r2, [r3, #20]
 800075e:	4b41      	ldr	r3, [pc, #260]	@ (8000864 <MX_GPIO_Init+0x120>)
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	03c9      	lsls	r1, r1, #15
 8000764:	430a      	orrs	r2, r1
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	4b3e      	ldr	r3, [pc, #248]	@ (8000864 <MX_GPIO_Init+0x120>)
 800076a:	695a      	ldr	r2, [r3, #20]
 800076c:	2380      	movs	r3, #128	@ 0x80
 800076e:	03db      	lsls	r3, r3, #15
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b3b      	ldr	r3, [pc, #236]	@ (8000864 <MX_GPIO_Init+0x120>)
 8000778:	695a      	ldr	r2, [r3, #20]
 800077a:	4b3a      	ldr	r3, [pc, #232]	@ (8000864 <MX_GPIO_Init+0x120>)
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	0289      	lsls	r1, r1, #10
 8000780:	430a      	orrs	r2, r1
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	4b37      	ldr	r3, [pc, #220]	@ (8000864 <MX_GPIO_Init+0x120>)
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	4013      	ands	r3, r2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b34      	ldr	r3, [pc, #208]	@ (8000864 <MX_GPIO_Init+0x120>)
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	4b33      	ldr	r3, [pc, #204]	@ (8000864 <MX_GPIO_Init+0x120>)
 8000798:	2180      	movs	r1, #128	@ 0x80
 800079a:	02c9      	lsls	r1, r1, #11
 800079c:	430a      	orrs	r2, r1
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <MX_GPIO_Init+0x120>)
 80007a2:	695a      	ldr	r2, [r3, #20]
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	02db      	lsls	r3, r3, #11
 80007a8:	4013      	ands	r3, r2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
//   __HAL_COMP_COMP_LAT_RESET(hcomp.Instance); // Set COMP_LAT to 0b0
//   __HAL_COMP_COMP_QUE_SET(hcomp.Instance, 0b11); // Set COMP_QUE to 0b11
//
//   HAL_COMP_Start(&hcomp); // Start comparator

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007ae:	492e      	ldr	r1, [pc, #184]	@ (8000868 <MX_GPIO_Init+0x124>)
 80007b0:	2390      	movs	r3, #144	@ 0x90
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fda4 	bl	8001304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007bc:	23f0      	movs	r3, #240	@ 0xf0
 80007be:	33ff      	adds	r3, #255	@ 0xff
 80007c0:	482a      	ldr	r0, [pc, #168]	@ (800086c <MX_GPIO_Init+0x128>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	0019      	movs	r1, r3
 80007c6:	f000 fd9d 	bl	8001304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	4a26      	ldr	r2, [pc, #152]	@ (8000868 <MX_GPIO_Init+0x124>)
 80007ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	193a      	adds	r2, r7, r4
 80007e4:	2390      	movs	r3, #144	@ 0x90
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fc1a 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2208      	movs	r2, #8
 80007f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	193a      	adds	r2, r7, r4
 8000804:	2390      	movs	r3, #144	@ 0x90
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fc0a 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000810:	0021      	movs	r1, r4
 8000812:	187b      	adds	r3, r7, r1
 8000814:	22f0      	movs	r2, #240	@ 0xf0
 8000816:	32ff      	adds	r2, #255	@ 0xff
 8000818:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	000c      	movs	r4, r1
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2201      	movs	r2, #1
 8000820:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	193b      	adds	r3, r7, r4
 8000830:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <MX_GPIO_Init+0x128>)
 8000832:	0019      	movs	r1, r3
 8000834:	0010      	movs	r0, r2
 8000836:	f000 fbf5 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800083a:	0021      	movs	r1, r4
 800083c:	187b      	adds	r3, r7, r1
 800083e:	4a0c      	ldr	r2, [pc, #48]	@ (8000870 <MX_GPIO_Init+0x12c>)
 8000840:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	187b      	adds	r3, r7, r1
 8000850:	4a06      	ldr	r2, [pc, #24]	@ (800086c <MX_GPIO_Init+0x128>)
 8000852:	0019      	movs	r1, r3
 8000854:	0010      	movs	r0, r2
 8000856:	f000 fbe5 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_1 */
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b009      	add	sp, #36	@ 0x24
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	40021000 	.word	0x40021000
 8000868:	00000ff4 	.word	0x00000ff4
 800086c:	48000400 	.word	0x48000400
 8000870:	0000fe10 	.word	0x0000fe10

08000874 <Binary4Bit>:

/* USER CODE BEGIN 4 */
uint8_t Binary4Bit(uint8_t num) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	701a      	strb	r2, [r3, #0]
	uint8_t bit;
    for (int i = 3; i >= 0; i--) {
 8000880:	2303      	movs	r3, #3
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	e00d      	b.n	80008a2 <Binary4Bit+0x2e>
    	bit = (num >> i) & 1;
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	411a      	asrs	r2, r3
 800088e:	0013      	movs	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	230f      	movs	r3, #15
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2101      	movs	r1, #1
 8000898:	400a      	ands	r2, r1
 800089a:	701a      	strb	r2, [r3, #0]
    for (int i = 3; i >= 0; i--) {
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	3b01      	subs	r3, #1
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	daee      	bge.n	8000886 <Binary4Bit+0x12>
    }
    return bit;
 80008a8:	230f      	movs	r3, #15
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	781b      	ldrb	r3, [r3, #0]
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <mux>:



void mux(uint8_t pin1, uint8_t pin2, uint8_t IO) { //selectMux abstraction
 80008b6:	b590      	push	{r4, r7, lr}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	0004      	movs	r4, r0
 80008be:	0008      	movs	r0, r1
 80008c0:	0011      	movs	r1, r2
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	1c22      	adds	r2, r4, #0
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	1dbb      	adds	r3, r7, #6
 80008ca:	1c02      	adds	r2, r0, #0
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	1d7b      	adds	r3, r7, #5
 80008d0:	1c0a      	adds	r2, r1, #0
 80008d2:	701a      	strb	r2, [r3, #0]
	selectMux(1, IO, pin1); //deals with inner mux first
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	1d7b      	adds	r3, r7, #5
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	0019      	movs	r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 f80c 	bl	80008fc <selectMux>
	selectMux(0, IO, pin2);
 80008e4:	1dbb      	adds	r3, r7, #6
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	1d7b      	adds	r3, r7, #5
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	0019      	movs	r1, r3
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f804 	bl	80008fc <selectMux>
}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b003      	add	sp, #12
 80008fa:	bd90      	pop	{r4, r7, pc}

080008fc <selectMux>:

void selectMux(uint8_t type, uint8_t IO, uint8_t bin_pin) {
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	0004      	movs	r4, r0
 8000904:	0008      	movs	r0, r1
 8000906:	0011      	movs	r1, r2
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	1c22      	adds	r2, r4, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	1dbb      	adds	r3, r7, #6
 8000910:	1c02      	adds	r2, r0, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	1d7b      	adds	r3, r7, #5
 8000916:	1c0a      	adds	r2, r1, #0
 8000918:	701a      	strb	r2, [r3, #0]
    // Determine MUX selection and IO direction
    if (type == 1) { // 1 is Inner, 0 is Outer
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d000      	beq.n	8000924 <selectMux+0x28>
 8000922:	e07a      	b.n	8000a1a <selectMux+0x11e>
        if (IO == 1) { // 1 is Input, 0 is Output
 8000924:	1dbb      	adds	r3, r7, #6
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d13d      	bne.n	80009a8 <selectMux+0xac>
            // Reset all pins to low before setting them according to bin_pin
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 800092c:	23f0      	movs	r3, #240	@ 0xf0
 800092e:	0119      	lsls	r1, r3, #4
 8000930:	2390      	movs	r3, #144	@ 0x90
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	2200      	movs	r2, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fce4 	bl	8001304 <HAL_GPIO_WritePin>

            // Set pins based on bin_pin bits
            if (bin_pin & 0b0001) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800093c:	1d7b      	adds	r3, r7, #5
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2201      	movs	r2, #1
 8000942:	4013      	ands	r3, r2
 8000944:	d007      	beq.n	8000956 <selectMux+0x5a>
 8000946:	2380      	movs	r3, #128	@ 0x80
 8000948:	0059      	lsls	r1, r3, #1
 800094a:	2390      	movs	r3, #144	@ 0x90
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2201      	movs	r2, #1
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fcd7 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0010) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000956:	1d7b      	adds	r3, r7, #5
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2202      	movs	r2, #2
 800095c:	4013      	ands	r3, r2
 800095e:	d007      	beq.n	8000970 <selectMux+0x74>
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	0099      	lsls	r1, r3, #2
 8000964:	2390      	movs	r3, #144	@ 0x90
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2201      	movs	r2, #1
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fcca 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0100) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000970:	1d7b      	adds	r3, r7, #5
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2204      	movs	r2, #4
 8000976:	4013      	ands	r3, r2
 8000978:	d007      	beq.n	800098a <selectMux+0x8e>
 800097a:	2380      	movs	r3, #128	@ 0x80
 800097c:	00d9      	lsls	r1, r3, #3
 800097e:	2390      	movs	r3, #144	@ 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2201      	movs	r2, #1
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fcbd 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b1000) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800098a:	1d7b      	adds	r3, r7, #5
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2208      	movs	r2, #8
 8000990:	4013      	ands	r3, r2
 8000992:	d100      	bne.n	8000996 <selectMux+0x9a>
 8000994:	e0b1      	b.n	8000afa <selectMux+0x1fe>
 8000996:	2380      	movs	r3, #128	@ 0x80
 8000998:	0119      	lsls	r1, r3, #4
 800099a:	2390      	movs	r3, #144	@ 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2201      	movs	r2, #1
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fcaf 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0010) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
            if (bin_pin & 0b0100) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
            if (bin_pin & 0b1000) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
        }
    }
}
 80009a6:	e0a8      	b.n	8000afa <selectMux+0x1fe>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 80009a8:	2390      	movs	r3, #144	@ 0x90
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2200      	movs	r2, #0
 80009ae:	21f0      	movs	r1, #240	@ 0xf0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fca7 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0001) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80009b6:	1d7b      	adds	r3, r7, #5
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4013      	ands	r3, r2
 80009be:	d006      	beq.n	80009ce <selectMux+0xd2>
 80009c0:	2390      	movs	r3, #144	@ 0x90
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fc9b 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0010) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009ce:	1d7b      	adds	r3, r7, #5
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2202      	movs	r2, #2
 80009d4:	4013      	ands	r3, r2
 80009d6:	d006      	beq.n	80009e6 <selectMux+0xea>
 80009d8:	2390      	movs	r3, #144	@ 0x90
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	2201      	movs	r2, #1
 80009de:	2120      	movs	r1, #32
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 fc8f 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0100) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009e6:	1d7b      	adds	r3, r7, #5
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2204      	movs	r2, #4
 80009ec:	4013      	ands	r3, r2
 80009ee:	d006      	beq.n	80009fe <selectMux+0x102>
 80009f0:	2390      	movs	r3, #144	@ 0x90
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	2201      	movs	r2, #1
 80009f6:	2140      	movs	r1, #64	@ 0x40
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 fc83 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b1000) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80009fe:	1d7b      	adds	r3, r7, #5
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2208      	movs	r2, #8
 8000a04:	4013      	ands	r3, r2
 8000a06:	d100      	bne.n	8000a0a <selectMux+0x10e>
 8000a08:	e077      	b.n	8000afa <selectMux+0x1fe>
 8000a0a:	2390      	movs	r3, #144	@ 0x90
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fc76 	bl	8001304 <HAL_GPIO_WritePin>
}
 8000a18:	e06f      	b.n	8000afa <selectMux+0x1fe>
        if (IO == 1) { // 1 is Input, 0 is Output
 8000a1a:	1dbb      	adds	r3, r7, #6
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d137      	bne.n	8000a92 <selectMux+0x196>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000a22:	23f0      	movs	r3, #240	@ 0xf0
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	4837      	ldr	r0, [pc, #220]	@ (8000b04 <selectMux+0x208>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	f000 fc6a 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0001) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000a30:	1d7b      	adds	r3, r7, #5
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2201      	movs	r2, #1
 8000a36:	4013      	ands	r3, r2
 8000a38:	d006      	beq.n	8000a48 <selectMux+0x14c>
 8000a3a:	2380      	movs	r3, #128	@ 0x80
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4831      	ldr	r0, [pc, #196]	@ (8000b04 <selectMux+0x208>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	0019      	movs	r1, r3
 8000a44:	f000 fc5e 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0010) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000a48:	1d7b      	adds	r3, r7, #5
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	4013      	ands	r3, r2
 8000a50:	d006      	beq.n	8000a60 <selectMux+0x164>
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	482b      	ldr	r0, [pc, #172]	@ (8000b04 <selectMux+0x208>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	f000 fc52 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0100) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a60:	1d7b      	adds	r3, r7, #5
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2204      	movs	r2, #4
 8000a66:	4013      	ands	r3, r2
 8000a68:	d006      	beq.n	8000a78 <selectMux+0x17c>
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	015b      	lsls	r3, r3, #5
 8000a6e:	4825      	ldr	r0, [pc, #148]	@ (8000b04 <selectMux+0x208>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	0019      	movs	r1, r3
 8000a74:	f000 fc46 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b1000) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000a78:	1d7b      	adds	r3, r7, #5
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2208      	movs	r2, #8
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d03b      	beq.n	8000afa <selectMux+0x1fe>
 8000a82:	2380      	movs	r3, #128	@ 0x80
 8000a84:	019b      	lsls	r3, r3, #6
 8000a86:	481f      	ldr	r0, [pc, #124]	@ (8000b04 <selectMux+0x208>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	f000 fc3a 	bl	8001304 <HAL_GPIO_WritePin>
}
 8000a90:	e033      	b.n	8000afa <selectMux+0x1fe>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_RESET);
 8000a92:	23f0      	movs	r3, #240	@ 0xf0
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	481b      	ldr	r0, [pc, #108]	@ (8000b04 <selectMux+0x208>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	f000 fc32 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0001) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000aa0:	1d7b      	adds	r3, r7, #5
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d005      	beq.n	8000ab6 <selectMux+0x1ba>
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <selectMux+0x208>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	2120      	movs	r1, #32
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 fc27 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0010) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ab6:	1d7b      	adds	r3, r7, #5
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2202      	movs	r2, #2
 8000abc:	4013      	ands	r3, r2
 8000abe:	d005      	beq.n	8000acc <selectMux+0x1d0>
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <selectMux+0x208>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2140      	movs	r1, #64	@ 0x40
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fc1c 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b0100) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000acc:	1d7b      	adds	r3, r7, #5
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d005      	beq.n	8000ae2 <selectMux+0x1e6>
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <selectMux+0x208>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fc11 	bl	8001304 <HAL_GPIO_WritePin>
            if (bin_pin & 0b1000) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000ae2:	1d7b      	adds	r3, r7, #5
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d006      	beq.n	8000afa <selectMux+0x1fe>
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <selectMux+0x208>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	0019      	movs	r1, r3
 8000af6:	f000 fc05 	bl	8001304 <HAL_GPIO_WritePin>
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b003      	add	sp, #12
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	48000400 	.word	0x48000400

08000b08 <contDetect>:

  value = (convData[0] << 8) | convData[1];
  return value;
}

float* contDetect() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af04      	add	r7, sp, #16
	for(int i=0; i< 4; i++){
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e077      	b.n	8000c04 <contDetect+0xfc>
				ADSwrite[0] = 0x01;
 8000b14:	4b3f      	ldr	r3, [pc, #252]	@ (8000c14 <contDetect+0x10c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]

				switch(i){
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d01b      	beq.n	8000b58 <contDetect+0x50>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	dc1c      	bgt.n	8000b60 <contDetect+0x58>
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d011      	beq.n	8000b50 <contDetect+0x48>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	dc16      	bgt.n	8000b60 <contDetect+0x58>
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <contDetect+0x38>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d004      	beq.n	8000b48 <contDetect+0x40>
 8000b3e:	e00f      	b.n	8000b60 <contDetect+0x58>
					case(0):
						ADSwrite[1] = 0xCD; //11001101 #bits 1-3 (110) correspond to PGA gain of 0.256V
 8000b40:	4b34      	ldr	r3, [pc, #208]	@ (8000c14 <contDetect+0x10c>)
 8000b42:	22cd      	movs	r2, #205	@ 0xcd
 8000b44:	705a      	strb	r2, [r3, #1]
					break;
 8000b46:	e00b      	b.n	8000b60 <contDetect+0x58>
					case(1):
						ADSwrite[1] = 0xDD; //11011101
 8000b48:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <contDetect+0x10c>)
 8000b4a:	22dd      	movs	r2, #221	@ 0xdd
 8000b4c:	705a      	strb	r2, [r3, #1]
					break;
 8000b4e:	e007      	b.n	8000b60 <contDetect+0x58>
					case(2):
						ADSwrite[1] = 0xED;
 8000b50:	4b30      	ldr	r3, [pc, #192]	@ (8000c14 <contDetect+0x10c>)
 8000b52:	22ed      	movs	r2, #237	@ 0xed
 8000b54:	705a      	strb	r2, [r3, #1]
					break;
 8000b56:	e003      	b.n	8000b60 <contDetect+0x58>
					case(3):
						ADSwrite[1] = 0xFD;
 8000b58:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <contDetect+0x10c>)
 8000b5a:	22fd      	movs	r2, #253	@ 0xfd
 8000b5c:	705a      	strb	r2, [r3, #1]
					break;
 8000b5e:	46c0      	nop			@ (mov r8, r8)
				}

				ADSwrite[2] = 0x83; //10000011 LSB
 8000b60:	4b2c      	ldr	r3, [pc, #176]	@ (8000c14 <contDetect+0x10c>)
 8000b62:	2283      	movs	r2, #131	@ 0x83
 8000b64:	709a      	strb	r2, [r3, #2]

				 HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8000b66:	4a2b      	ldr	r2, [pc, #172]	@ (8000c14 <contDetect+0x10c>)
 8000b68:	482b      	ldr	r0, [pc, #172]	@ (8000c18 <contDetect+0x110>)
 8000b6a:	2364      	movs	r3, #100	@ 0x64
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2303      	movs	r3, #3
 8000b70:	2190      	movs	r1, #144	@ 0x90
 8000b72:	f000 fc7b 	bl	800146c <HAL_I2C_Master_Transmit>

				// Wait for conversion to complete by polling OS bit
				uint8_t configRegister[2];
				do {
					HAL_I2C_Mem_Read(&hi2c1, ADS1115_ADDRESS << 1, 0x01, I2C_MEMADD_SIZE_8BIT, configRegister, 2, 100);
 8000b76:	4828      	ldr	r0, [pc, #160]	@ (8000c18 <contDetect+0x110>)
 8000b78:	2364      	movs	r3, #100	@ 0x64
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2301      	movs	r3, #1
 8000b86:	2201      	movs	r2, #1
 8000b88:	2190      	movs	r1, #144	@ 0x90
 8000b8a:	f000 fd77 	bl	800167c <HAL_I2C_Mem_Read>
				} while ((configRegister[0] & 0x80) == 0);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	daee      	bge.n	8000b76 <contDetect+0x6e>

				// Read conversion results
				HAL_I2C_Mem_Read(&hi2c1, ADS1115_ADDRESS << 1, 0x00, I2C_MEMADD_SIZE_8BIT, ADSread, 2, 100);
 8000b98:	481f      	ldr	r0, [pc, #124]	@ (8000c18 <contDetect+0x110>)
 8000b9a:	2364      	movs	r3, #100	@ 0x64
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <contDetect+0x114>)
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2190      	movs	r1, #144	@ 0x90
 8000bac:	f000 fd66 	bl	800167c <HAL_I2C_Mem_Read>
				reading = (ADSread[0] << 8) | ADSread[1];
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <contDetect+0x114>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <contDetect+0x114>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <contDetect+0x118>)
 8000bc4:	801a      	strh	r2, [r3, #0]
				if(reading < 0) {
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <contDetect+0x118>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	5e9b      	ldrsh	r3, [r3, r2]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	da02      	bge.n	8000bd6 <contDetect+0xce>
					reading = 0;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <contDetect+0x118>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	801a      	strh	r2, [r3, #0]
				}
				voltage[i] = reading * voltageConv;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <contDetect+0x118>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	5e9b      	ldrsh	r3, [r3, r2]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fc5b 	bl	8000498 <__aeabi_i2f>
 8000be2:	1c03      	adds	r3, r0, #0
 8000be4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <contDetect+0x11c>)
 8000be6:	1c11      	adds	r1, r2, #0
 8000be8:	1c18      	adds	r0, r3, #0
 8000bea:	f7ff fb17 	bl	800021c <__aeabi_fmul>
 8000bee:	1c03      	adds	r3, r0, #0
 8000bf0:	1c19      	adds	r1, r3, #0
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <contDetect+0x120>)
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	0092      	lsls	r2, r2, #2
 8000bf8:	50d1      	str	r1, [r2, r3]
				int pause = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< 4; i++){
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	dd84      	ble.n	8000b14 <contDetect+0xc>

	}
	return voltage;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <contDetect+0x120>)
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b004      	add	sp, #16
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000028 	.word	0x20000028
 8000c18:	20000040 	.word	0x20000040
 8000c1c:	2000002c 	.word	0x2000002c
 8000c20:	2000002e 	.word	0x2000002e
 8000c24:	3703126f 	.word	0x3703126f
 8000c28:	20000030 	.word	0x20000030

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL err	or return state */
  __disable_irq();
  while (1)
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c40:	699a      	ldr	r2, [r3, #24]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c44:	2101      	movs	r1, #1
 8000c46:	430a      	orrs	r2, r1
 8000c48:	619a      	str	r2, [r3, #24]
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4013      	ands	r3, r2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c58:	69da      	ldr	r2, [r3, #28]
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	2180      	movs	r1, #128	@ 0x80
 8000c5e:	0549      	lsls	r1, r1, #21
 8000c60:	430a      	orrs	r2, r1
 8000c62:	61da      	str	r2, [r3, #28]
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c66:	69da      	ldr	r2, [r3, #28]
 8000c68:	2380      	movs	r3, #128	@ 0x80
 8000c6a:	055b      	lsls	r3, r3, #21
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b08b      	sub	sp, #44	@ 0x2c
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	2414      	movs	r4, #20
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	2314      	movs	r3, #20
 8000c90:	001a      	movs	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	f001 fe5e 	bl	8002954 <memset>
  if(hi2c->Instance==I2C1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <HAL_I2C_MspInit+0x90>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d131      	bne.n	8000d06 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	03c9      	lsls	r1, r1, #15
 8000cac:	430a      	orrs	r2, r1
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000cb2:	695a      	ldr	r2, [r3, #20]
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	03db      	lsls	r3, r3, #15
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cbe:	0021      	movs	r1, r4
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2212      	movs	r2, #18
 8000cca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2201      	movs	r2, #1
 8000cdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <HAL_I2C_MspInit+0x98>)
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	0010      	movs	r0, r2
 8000ce6:	f000 f99d 	bl	8001024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000cec:	69da      	ldr	r2, [r3, #28]
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000cf0:	2180      	movs	r1, #128	@ 0x80
 8000cf2:	0389      	lsls	r1, r1, #14
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	61da      	str	r2, [r3, #28]
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000cfa:	69da      	ldr	r2, [r3, #28]
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	039b      	lsls	r3, r3, #14
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b00b      	add	sp, #44	@ 0x2c
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	40005400 	.word	0x40005400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48001400 	.word	0x48001400

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	e7fd      	b.n	8000d20 <NMI_Handler+0x4>

08000d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	e7fd      	b.n	8000d28 <HardFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f87a 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d58:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d5c:	f7ff fff7 	bl	8000d4e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	@ (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d86:	f001 fded 	bl	8002964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fbef 	bl	800056c <main>

08000d8e <LoopForever>:

LoopForever:
    b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   r0, =_estack
 8000d90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d9c:	080029fc 	.word	0x080029fc
  ldr r2, =_sbss
 8000da0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000da4:	20000098 	.word	0x20000098

08000da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_IRQHandler>
	...

08000dac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <HAL_Init+0x24>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_Init+0x24>)
 8000db6:	2110      	movs	r1, #16
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f809 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc2:	f7ff ff39 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <HAL_InitTick+0x5c>)
 8000dde:	681c      	ldr	r4, [r3, #0]
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	0019      	movs	r1, r3
 8000de6:	23fa      	movs	r3, #250	@ 0xfa
 8000de8:	0098      	lsls	r0, r3, #2
 8000dea:	f7ff f98b 	bl	8000104 <__udivsi3>
 8000dee:	0003      	movs	r3, r0
 8000df0:	0019      	movs	r1, r3
 8000df2:	0020      	movs	r0, r4
 8000df4:	f7ff f986 	bl	8000104 <__udivsi3>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 f905 	bl	800100a <HAL_SYSTICK_Config>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e00f      	b.n	8000e28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d80b      	bhi.n	8000e26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 f8e2 	bl	8000fe0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_InitTick+0x64>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b003      	add	sp, #12
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	18d2      	adds	r2, r2, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000094 	.word	0x20000094

08000e60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	@ (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	20000094 	.word	0x20000094

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fff0 	bl	8000e60 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001a      	movs	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	f7ff ffe0 	bl	8000e60 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed0:	d828      	bhi.n	8000f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8000f90 <__NVIC_SetPriority+0xd4>)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	33c0      	adds	r3, #192	@ 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	589b      	ldr	r3, [r3, r2]
 8000ee2:	1dfa      	adds	r2, r7, #7
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	2203      	movs	r2, #3
 8000eea:	400a      	ands	r2, r1
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	21ff      	movs	r1, #255	@ 0xff
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	22ff      	movs	r2, #255	@ 0xff
 8000f00:	401a      	ands	r2, r3
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	4003      	ands	r3, r0
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f10:	481f      	ldr	r0, [pc, #124]	@ (8000f90 <__NVIC_SetPriority+0xd4>)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	33c0      	adds	r3, #192	@ 0xc0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f22:	e031      	b.n	8000f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	400b      	ands	r3, r1
 8000f30:	3b08      	subs	r3, #8
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3306      	adds	r3, #6
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1dfa      	adds	r2, r7, #7
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	0011      	movs	r1, r2
 8000f44:	2203      	movs	r2, #3
 8000f46:	400a      	ands	r2, r1
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	21ff      	movs	r1, #255	@ 0xff
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	22ff      	movs	r2, #255	@ 0xff
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	2303      	movs	r3, #3
 8000f66:	4003      	ands	r3, r0
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	001c      	movs	r4, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	4023      	ands	r3, r4
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	3306      	adds	r3, #6
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18c3      	adds	r3, r0, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	045b      	lsls	r3, r3, #17
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d301      	bcc.n	8000fb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fac:	2301      	movs	r3, #1
 8000fae:	e010      	b.n	8000fd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <SysTick_Config+0x44>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff ff7c 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x44>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	210f      	movs	r1, #15
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ffbf 	bl	8000f98 <SysTick_Config>
 800101a:	0003      	movs	r3, r0
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e14f      	b.n	80012d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4091      	lsls	r1, r2
 800103e:	000a      	movs	r2, r1
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d100      	bne.n	800104c <HAL_GPIO_Init+0x28>
 800104a:	e140      	b.n	80012ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2203      	movs	r2, #3
 8001052:	4013      	ands	r3, r2
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001060:	2b02      	cmp	r3, #2
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	409a      	lsls	r2, r3
 8001072:	0013      	movs	r3, r2
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	0013      	movs	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	2201      	movs	r2, #1
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d017      	beq.n	8001102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	4013      	ands	r3, r2
 800110a:	2b02      	cmp	r3, #2
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	58d3      	ldr	r3, [r2, r3]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2207      	movs	r2, #7
 8001120:	4013      	ands	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2107      	movs	r1, #7
 800113a:	400b      	ands	r3, r1
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	6939      	ldr	r1, [r7, #16]
 8001154:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	401a      	ands	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	23c0      	movs	r3, #192	@ 0xc0
 8001190:	029b      	lsls	r3, r3, #10
 8001192:	4013      	ands	r3, r2
 8001194:	d100      	bne.n	8001198 <HAL_GPIO_Init+0x174>
 8001196:	e09a      	b.n	80012ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	4b54      	ldr	r3, [pc, #336]	@ (80012ec <HAL_GPIO_Init+0x2c8>)
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_GPIO_Init+0x2c8>)
 800119e:	2101      	movs	r1, #1
 80011a0:	430a      	orrs	r2, r1
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	4b51      	ldr	r3, [pc, #324]	@ (80012ec <HAL_GPIO_Init+0x2c8>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	2201      	movs	r2, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b0:	4a4f      	ldr	r2, [pc, #316]	@ (80012f0 <HAL_GPIO_Init+0x2cc>)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	589b      	ldr	r3, [r3, r2]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4013      	ands	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	409a      	lsls	r2, r3
 80011ca:	0013      	movs	r3, r2
 80011cc:	43da      	mvns	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	2390      	movs	r3, #144	@ 0x90
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	429a      	cmp	r2, r3
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x1e2>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a44      	ldr	r2, [pc, #272]	@ (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x1de>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a43      	ldr	r2, [pc, #268]	@ (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x1da>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a42      	ldr	r2, [pc, #264]	@ (80012fc <HAL_GPIO_Init+0x2d8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x1d6>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x1e4>
 8001206:	2300      	movs	r3, #0
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	2103      	movs	r1, #3
 800120c:	400a      	ands	r2, r1
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	@ (80012f0 <HAL_GPIO_Init+0x2cc>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001226:	4b36      	ldr	r3, [pc, #216]	@ (8001300 <HAL_GPIO_Init+0x2dc>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43da      	mvns	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	035b      	lsls	r3, r3, #13
 800123e:	4013      	ands	r3, r2
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800124a:	4b2d      	ldr	r3, [pc, #180]	@ (8001300 <HAL_GPIO_Init+0x2dc>)
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001250:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <HAL_GPIO_Init+0x2dc>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43da      	mvns	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	039b      	lsls	r3, r3, #14
 8001268:	4013      	ands	r3, r2
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <HAL_GPIO_Init+0x2dc>)
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <HAL_GPIO_Init+0x2dc>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	@ 0x80
 8001290:	029b      	lsls	r3, r3, #10
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <HAL_GPIO_Init+0x2dc>)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80012a4:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <HAL_GPIO_Init+0x2dc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_GPIO_Init+0x2dc>)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	40da      	lsrs	r2, r3
 80012dc:	1e13      	subs	r3, r2, #0
 80012de:	d000      	beq.n	80012e2 <HAL_GPIO_Init+0x2be>
 80012e0:	e6a8      	b.n	8001034 <HAL_GPIO_Init+0x10>
  } 
}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b006      	add	sp, #24
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000c00 	.word	0x48000c00
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	0008      	movs	r0, r1
 800130e:	0011      	movs	r1, r2
 8001310:	1cbb      	adds	r3, r7, #2
 8001312:	1c02      	adds	r2, r0, #0
 8001314:	801a      	strh	r2, [r3, #0]
 8001316:	1c7b      	adds	r3, r7, #1
 8001318:	1c0a      	adds	r2, r1, #0
 800131a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800131c:	1c7b      	adds	r3, r7, #1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001324:	1cbb      	adds	r3, r7, #2
 8001326:	881a      	ldrh	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132e:	1cbb      	adds	r3, r7, #2
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e082      	b.n	8001458 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2241      	movs	r2, #65	@ 0x41
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d107      	bne.n	800136e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2240      	movs	r2, #64	@ 0x40
 8001362:	2100      	movs	r1, #0
 8001364:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fc89 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2241      	movs	r2, #65	@ 0x41
 8001372:	2124      	movs	r1, #36	@ 0x24
 8001374:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	438a      	bics	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4934      	ldr	r1, [pc, #208]	@ (8001460 <HAL_I2C_Init+0x120>)
 8001390:	400a      	ands	r2, r1
 8001392:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4931      	ldr	r1, [pc, #196]	@ (8001464 <HAL_I2C_Init+0x124>)
 80013a0:	400a      	ands	r2, r1
 80013a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d108      	bne.n	80013be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2180      	movs	r1, #128	@ 0x80
 80013b6:	0209      	lsls	r1, r1, #8
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e007      	b.n	80013ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2184      	movs	r1, #132	@ 0x84
 80013c8:	0209      	lsls	r1, r1, #8
 80013ca:	430a      	orrs	r2, r1
 80013cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d104      	bne.n	80013e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	491f      	ldr	r1, [pc, #124]	@ (8001468 <HAL_I2C_Init+0x128>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	491a      	ldr	r1, [pc, #104]	@ (8001464 <HAL_I2C_Init+0x124>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	431a      	orrs	r2, r3
 800140a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69d9      	ldr	r1, [r3, #28]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2241      	movs	r2, #65	@ 0x41
 8001444:	2120      	movs	r1, #32
 8001446:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2242      	movs	r2, #66	@ 0x42
 8001452:	2100      	movs	r1, #0
 8001454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}
 8001460:	f0ffffff 	.word	0xf0ffffff
 8001464:	ffff7fff 	.word	0xffff7fff
 8001468:	02008000 	.word	0x02008000

0800146c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af02      	add	r7, sp, #8
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	0008      	movs	r0, r1
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	0019      	movs	r1, r3
 800147a:	230a      	movs	r3, #10
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	1c02      	adds	r2, r0, #0
 8001480:	801a      	strh	r2, [r3, #0]
 8001482:	2308      	movs	r3, #8
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	1c0a      	adds	r2, r1, #0
 8001488:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2241      	movs	r2, #65	@ 0x41
 800148e:	5c9b      	ldrb	r3, [r3, r2]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b20      	cmp	r3, #32
 8001494:	d000      	beq.n	8001498 <HAL_I2C_Master_Transmit+0x2c>
 8001496:	e0e7      	b.n	8001668 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2240      	movs	r2, #64	@ 0x40
 800149c:	5c9b      	ldrb	r3, [r3, r2]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_I2C_Master_Transmit+0x3a>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e0e1      	b.n	800166a <HAL_I2C_Master_Transmit+0x1fe>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2240      	movs	r2, #64	@ 0x40
 80014aa:	2101      	movs	r1, #1
 80014ac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014ae:	f7ff fcd7 	bl	8000e60 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	0219      	lsls	r1, r3, #8
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2319      	movs	r3, #25
 80014c2:	2201      	movs	r2, #1
 80014c4:	f000 fa92 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0cc      	b.n	800166a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2241      	movs	r2, #65	@ 0x41
 80014d4:	2121      	movs	r1, #33	@ 0x21
 80014d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2242      	movs	r2, #66	@ 0x42
 80014dc:	2110      	movs	r1, #16
 80014de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2208      	movs	r2, #8
 80014f0:	18ba      	adds	r2, r7, r2
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001500:	b29b      	uxth	r3, r3
 8001502:	2bff      	cmp	r3, #255	@ 0xff
 8001504:	d911      	bls.n	800152a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	22ff      	movs	r2, #255	@ 0xff
 800150a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001510:	b2da      	uxtb	r2, r3
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	045c      	lsls	r4, r3, #17
 8001516:	230a      	movs	r3, #10
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	8819      	ldrh	r1, [r3, #0]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	4b55      	ldr	r3, [pc, #340]	@ (8001674 <HAL_I2C_Master_Transmit+0x208>)
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	0023      	movs	r3, r4
 8001524:	f000 fc32 	bl	8001d8c <I2C_TransferConfig>
 8001528:	e075      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800152e:	b29a      	uxth	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001538:	b2da      	uxtb	r2, r3
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	049c      	lsls	r4, r3, #18
 800153e:	230a      	movs	r3, #10
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	8819      	ldrh	r1, [r3, #0]
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	4b4b      	ldr	r3, [pc, #300]	@ (8001674 <HAL_I2C_Master_Transmit+0x208>)
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	0023      	movs	r3, r4
 800154c:	f000 fc1e 	bl	8001d8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001550:	e061      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 fa95 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e081      	b.n	800166a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001580:	b29b      	uxth	r3, r3
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800158e:	3b01      	subs	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03a      	beq.n	8001616 <HAL_I2C_Master_Transmit+0x1aa>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d136      	bne.n	8001616 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	0013      	movs	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	2180      	movs	r1, #128	@ 0x80
 80015b6:	f000 fa19 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e053      	b.n	800166a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2bff      	cmp	r3, #255	@ 0xff
 80015ca:	d911      	bls.n	80015f0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	22ff      	movs	r2, #255	@ 0xff
 80015d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	045c      	lsls	r4, r3, #17
 80015dc:	230a      	movs	r3, #10
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	8819      	ldrh	r1, [r3, #0]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	2300      	movs	r3, #0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	0023      	movs	r3, r4
 80015ea:	f000 fbcf 	bl	8001d8c <I2C_TransferConfig>
 80015ee:	e012      	b.n	8001616 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	049c      	lsls	r4, r3, #18
 8001604:	230a      	movs	r3, #10
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	8819      	ldrh	r1, [r3, #0]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	2300      	movs	r3, #0
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	0023      	movs	r3, r4
 8001612:	f000 fbbb 	bl	8001d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161a:	b29b      	uxth	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d198      	bne.n	8001552 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	0018      	movs	r0, r3
 8001628:	f000 fa74 	bl	8001b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800162c:	1e03      	subs	r3, r0, #0
 800162e:	d001      	beq.n	8001634 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e01a      	b.n	800166a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2220      	movs	r2, #32
 800163a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	490c      	ldr	r1, [pc, #48]	@ (8001678 <HAL_I2C_Master_Transmit+0x20c>)
 8001648:	400a      	ands	r2, r1
 800164a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2241      	movs	r2, #65	@ 0x41
 8001650:	2120      	movs	r1, #32
 8001652:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2242      	movs	r2, #66	@ 0x42
 8001658:	2100      	movs	r1, #0
 800165a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2240      	movs	r2, #64	@ 0x40
 8001660:	2100      	movs	r1, #0
 8001662:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	e000      	b.n	800166a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001668:	2302      	movs	r3, #2
  }
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b007      	add	sp, #28
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	80002000 	.word	0x80002000
 8001678:	fe00e800 	.word	0xfe00e800

0800167c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b089      	sub	sp, #36	@ 0x24
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	000c      	movs	r4, r1
 8001686:	0010      	movs	r0, r2
 8001688:	0019      	movs	r1, r3
 800168a:	230a      	movs	r3, #10
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	1c22      	adds	r2, r4, #0
 8001690:	801a      	strh	r2, [r3, #0]
 8001692:	2308      	movs	r3, #8
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	1c02      	adds	r2, r0, #0
 8001698:	801a      	strh	r2, [r3, #0]
 800169a:	1dbb      	adds	r3, r7, #6
 800169c:	1c0a      	adds	r2, r1, #0
 800169e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2241      	movs	r2, #65	@ 0x41
 80016a4:	5c9b      	ldrb	r3, [r3, r2]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d000      	beq.n	80016ae <HAL_I2C_Mem_Read+0x32>
 80016ac:	e110      	b.n	80018d0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_I2C_Mem_Read+0x42>
 80016b4:	232c      	movs	r3, #44	@ 0x2c
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e103      	b.n	80018d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2240      	movs	r2, #64	@ 0x40
 80016ce:	5c9b      	ldrb	r3, [r3, r2]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_I2C_Mem_Read+0x5c>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e0fc      	b.n	80018d2 <HAL_I2C_Mem_Read+0x256>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2240      	movs	r2, #64	@ 0x40
 80016dc:	2101      	movs	r1, #1
 80016de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016e0:	f7ff fbbe 	bl	8000e60 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	0219      	lsls	r1, r3, #8
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2319      	movs	r3, #25
 80016f4:	2201      	movs	r2, #1
 80016f6:	f000 f979 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80016fa:	1e03      	subs	r3, r0, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0e7      	b.n	80018d2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2241      	movs	r2, #65	@ 0x41
 8001706:	2122      	movs	r1, #34	@ 0x22
 8001708:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2242      	movs	r2, #66	@ 0x42
 800170e:	2140      	movs	r1, #64	@ 0x40
 8001710:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	222c      	movs	r2, #44	@ 0x2c
 8001722:	18ba      	adds	r2, r7, r2
 8001724:	8812      	ldrh	r2, [r2, #0]
 8001726:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800172e:	1dbb      	adds	r3, r7, #6
 8001730:	881c      	ldrh	r4, [r3, #0]
 8001732:	2308      	movs	r3, #8
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	881a      	ldrh	r2, [r3, #0]
 8001738:	230a      	movs	r3, #10
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	8819      	ldrh	r1, [r3, #0]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	0023      	movs	r3, r4
 800174a:	f000 f8cb 	bl	80018e4 <I2C_RequestMemoryRead>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d005      	beq.n	800175e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2240      	movs	r2, #64	@ 0x40
 8001756:	2100      	movs	r1, #0
 8001758:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0b9      	b.n	80018d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	2bff      	cmp	r3, #255	@ 0xff
 8001766:	d911      	bls.n	800178c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	22ff      	movs	r2, #255	@ 0xff
 800176c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001772:	b2da      	uxtb	r2, r3
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	045c      	lsls	r4, r3, #17
 8001778:	230a      	movs	r3, #10
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	8819      	ldrh	r1, [r3, #0]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	4b56      	ldr	r3, [pc, #344]	@ (80018dc <HAL_I2C_Mem_Read+0x260>)
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	0023      	movs	r3, r4
 8001786:	f000 fb01 	bl	8001d8c <I2C_TransferConfig>
 800178a:	e012      	b.n	80017b2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800179a:	b2da      	uxtb	r2, r3
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	049c      	lsls	r4, r3, #18
 80017a0:	230a      	movs	r3, #10
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	8819      	ldrh	r1, [r3, #0]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	4b4c      	ldr	r3, [pc, #304]	@ (80018dc <HAL_I2C_Mem_Read+0x260>)
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	0023      	movs	r3, r4
 80017ae:	f000 faed 	bl	8001d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	0013      	movs	r3, r2
 80017bc:	2200      	movs	r2, #0
 80017be:	2104      	movs	r1, #4
 80017c0:	f000 f914 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80017c4:	1e03      	subs	r3, r0, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e082      	b.n	80018d2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03a      	beq.n	800187e <HAL_I2C_Mem_Read+0x202>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	d136      	bne.n	800187e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	0013      	movs	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	f000 f8e5 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e053      	b.n	80018d2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	2bff      	cmp	r3, #255	@ 0xff
 8001832:	d911      	bls.n	8001858 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	22ff      	movs	r2, #255	@ 0xff
 8001838:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183e:	b2da      	uxtb	r2, r3
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	045c      	lsls	r4, r3, #17
 8001844:	230a      	movs	r3, #10
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	8819      	ldrh	r1, [r3, #0]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	0023      	movs	r3, r4
 8001852:	f000 fa9b 	bl	8001d8c <I2C_TransferConfig>
 8001856:	e012      	b.n	800187e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001866:	b2da      	uxtb	r2, r3
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	049c      	lsls	r4, r3, #18
 800186c:	230a      	movs	r3, #10
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	8819      	ldrh	r1, [r3, #0]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	0023      	movs	r3, r4
 800187a:	f000 fa87 	bl	8001d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d194      	bne.n	80017b2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	0018      	movs	r0, r3
 8001890:	f000 f940 	bl	8001b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e01a      	b.n	80018d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2220      	movs	r2, #32
 80018a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <HAL_I2C_Mem_Read+0x264>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2241      	movs	r2, #65	@ 0x41
 80018b8:	2120      	movs	r1, #32
 80018ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2242      	movs	r2, #66	@ 0x42
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2240      	movs	r2, #64	@ 0x40
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
  }
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b007      	add	sp, #28
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	80002400 	.word	0x80002400
 80018e0:	fe00e800 	.word	0xfe00e800

080018e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	000c      	movs	r4, r1
 80018ee:	0010      	movs	r0, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	250a      	movs	r5, #10
 80018f4:	197b      	adds	r3, r7, r5
 80018f6:	1c22      	adds	r2, r4, #0
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	2308      	movs	r3, #8
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	1c02      	adds	r2, r0, #0
 8001900:	801a      	strh	r2, [r3, #0]
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	1c0a      	adds	r2, r1, #0
 8001906:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001908:	1dbb      	adds	r3, r7, #6
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	197b      	adds	r3, r7, r5
 8001910:	8819      	ldrh	r1, [r3, #0]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <I2C_RequestMemoryRead+0xc0>)
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	f000 fa37 	bl	8001d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f8af 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d001      	beq.n	8001932 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e033      	b.n	800199a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001932:	1dbb      	adds	r3, r7, #6
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800193a:	2308      	movs	r3, #8
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
 8001948:	e019      	b.n	800197e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800194a:	2308      	movs	r3, #8
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	b29b      	uxth	r3, r3
 8001954:	b2da      	uxtb	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800195c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195e:	6a39      	ldr	r1, [r7, #32]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	0018      	movs	r0, r3
 8001964:	f000 f890 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 8001968:	1e03      	subs	r3, r0, #0
 800196a:	d001      	beq.n	8001970 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e014      	b.n	800199a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001970:	2308      	movs	r3, #8
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800197e:	6a3a      	ldr	r2, [r7, #32]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	0013      	movs	r3, r2
 8001988:	2200      	movs	r2, #0
 800198a:	2140      	movs	r1, #64	@ 0x40
 800198c:	f000 f82e 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bdb0      	pop	{r4, r5, r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	80002000 	.word	0x80002000

080019a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d007      	beq.n	80019e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	619a      	str	r2, [r3, #24]
  }
}
 80019e4:	46c0      	nop			@ (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}

080019ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fc:	e030      	b.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	d02d      	beq.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a04:	f7ff fa2c 	bl	8000e60 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d302      	bcc.n	8001a1a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d122      	bne.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4013      	ands	r3, r2
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	425a      	negs	r2, r3
 8001a2a:	4153      	adcs	r3, r2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	001a      	movs	r2, r3
 8001a30:	1dfb      	adds	r3, r7, #7
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d113      	bne.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2241      	movs	r2, #65	@ 0x41
 8001a48:	2120      	movs	r1, #32
 8001a4a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2242      	movs	r2, #66	@ 0x42
 8001a50:	2100      	movs	r1, #0
 8001a52:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2240      	movs	r2, #64	@ 0x40
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e00f      	b.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	425a      	negs	r2, r3
 8001a70:	4153      	adcs	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	001a      	movs	r2, r3
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d0bf      	beq.n	80019fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a94:	e032      	b.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 f87d 	bl	8001b9c <I2C_IsErrorOccurred>
 8001aa2:	1e03      	subs	r3, r0, #0
 8001aa4:	d001      	beq.n	8001aaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e030      	b.n	8001b0c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	d025      	beq.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab0:	f7ff f9d6 	bl	8000e60 <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d302      	bcc.n	8001ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11a      	bne.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d013      	beq.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad8:	2220      	movs	r2, #32
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2241      	movs	r2, #65	@ 0x41
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2242      	movs	r2, #66	@ 0x42
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2240      	movs	r2, #64	@ 0x40
 8001af4:	2100      	movs	r1, #0
 8001af6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e007      	b.n	8001b0c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d1c5      	bne.n	8001a96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b004      	add	sp, #16
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b20:	e02f      	b.n	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 f837 	bl	8001b9c <I2C_IsErrorOccurred>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e02d      	b.n	8001b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b36:	f7ff f993 	bl	8000e60 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d302      	bcc.n	8001b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11a      	bne.n	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2220      	movs	r2, #32
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d013      	beq.n	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	2220      	movs	r2, #32
 8001b60:	431a      	orrs	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2241      	movs	r2, #65	@ 0x41
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2242      	movs	r2, #66	@ 0x42
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2240      	movs	r2, #64	@ 0x40
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e007      	b.n	8001b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d1c8      	bne.n	8001b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b004      	add	sp, #16
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	@ 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba8:	2327      	movs	r3, #39	@ 0x27
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d100      	bne.n	8001bca <I2C_IsErrorOccurred+0x2e>
 8001bc8:	e079      	b.n	8001cbe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2210      	movs	r2, #16
 8001bd0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bd2:	e057      	b.n	8001c84 <I2C_IsErrorOccurred+0xe8>
 8001bd4:	2227      	movs	r2, #39	@ 0x27
 8001bd6:	18bb      	adds	r3, r7, r2
 8001bd8:	18ba      	adds	r2, r7, r2
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3301      	adds	r3, #1
 8001be2:	d04f      	beq.n	8001c84 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001be4:	f7ff f93c 	bl	8000e60 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d302      	bcc.n	8001bfa <I2C_IsErrorOccurred+0x5e>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d144      	bne.n	8001c84 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c08:	2013      	movs	r0, #19
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	2142      	movs	r1, #66	@ 0x42
 8001c10:	5c52      	ldrb	r2, [r2, r1]
 8001c12:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	401a      	ands	r2, r3
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d126      	bne.n	8001c76 <I2C_IsErrorOccurred+0xda>
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	01db      	lsls	r3, r3, #7
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d021      	beq.n	8001c76 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001c32:	183b      	adds	r3, r7, r0
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d01d      	beq.n	8001c76 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	01c9      	lsls	r1, r1, #7
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c4c:	f7ff f908 	bl	8000e60 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c54:	e00f      	b.n	8001c76 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c56:	f7ff f903 	bl	8000e60 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b19      	cmp	r3, #25
 8001c62:	d908      	bls.n	8001c76 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	2220      	movs	r2, #32
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c6c:	2327      	movs	r3, #39	@ 0x27
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]

              break;
 8001c74:	e006      	b.n	8001c84 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d1e8      	bne.n	8001c56 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	d004      	beq.n	8001c9c <I2C_IsErrorOccurred+0x100>
 8001c92:	2327      	movs	r3, #39	@ 0x27
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d09b      	beq.n	8001bd4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c9c:	2327      	movs	r3, #39	@ 0x27
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2220      	movs	r2, #32
 8001cac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cb6:	2327      	movs	r3, #39	@ 0x27
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d00c      	beq.n	8001cea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	0052      	lsls	r2, r2, #1
 8001ce0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ce2:	2327      	movs	r3, #39	@ 0x27
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d00c      	beq.n	8001d0e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2280      	movs	r2, #128	@ 0x80
 8001d02:	00d2      	lsls	r2, r2, #3
 8001d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d06:	2327      	movs	r3, #39	@ 0x27
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d00c      	beq.n	8001d32 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2280      	movs	r2, #128	@ 0x80
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d2a:	2327      	movs	r3, #39	@ 0x27
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d32:	2327      	movs	r3, #39	@ 0x27
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01d      	beq.n	8001d78 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7ff fe32 	bl	80019a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	490e      	ldr	r1, [pc, #56]	@ (8001d88 <I2C_IsErrorOccurred+0x1ec>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2241      	movs	r2, #65	@ 0x41
 8001d64:	2120      	movs	r1, #32
 8001d66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2242      	movs	r2, #66	@ 0x42
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2240      	movs	r2, #64	@ 0x40
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d78:	2327      	movs	r3, #39	@ 0x27
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b00a      	add	sp, #40	@ 0x28
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	fe00e800 	.word	0xfe00e800

08001d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	0008      	movs	r0, r1
 8001d96:	0011      	movs	r1, r2
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	240a      	movs	r4, #10
 8001d9c:	193b      	adds	r3, r7, r4
 8001d9e:	1c02      	adds	r2, r0, #0
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	2009      	movs	r0, #9
 8001da4:	183b      	adds	r3, r7, r0
 8001da6:	1c0a      	adds	r2, r1, #0
 8001da8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001daa:	193b      	adds	r3, r7, r4
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	059b      	lsls	r3, r3, #22
 8001db0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db2:	183b      	adds	r3, r7, r0
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	0419      	lsls	r1, r3, #16
 8001db8:	23ff      	movs	r3, #255	@ 0xff
 8001dba:	041b      	lsls	r3, r3, #16
 8001dbc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dbe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dd6:	0d51      	lsrs	r1, r2, #21
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	00d2      	lsls	r2, r2, #3
 8001ddc:	400a      	ands	r2, r1
 8001dde:	4907      	ldr	r1, [pc, #28]	@ (8001dfc <I2C_TransferConfig+0x70>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	43d2      	mvns	r2, r2
 8001de4:	401a      	ands	r2, r3
 8001de6:	0011      	movs	r1, r2
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b007      	add	sp, #28
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	03ff63ff 	.word	0x03ff63ff

08001e00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2241      	movs	r2, #65	@ 0x41
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d138      	bne.n	8001e88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2240      	movs	r2, #64	@ 0x40
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e032      	b.n	8001e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	2101      	movs	r1, #1
 8001e2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2241      	movs	r2, #65	@ 0x41
 8001e30:	2124      	movs	r1, #36	@ 0x24
 8001e32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4911      	ldr	r1, [pc, #68]	@ (8001e94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2241      	movs	r2, #65	@ 0x41
 8001e78:	2120      	movs	r1, #32
 8001e7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	2100      	movs	r1, #0
 8001e82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
  }
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	ffffefff 	.word	0xffffefff

08001e98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2241      	movs	r2, #65	@ 0x41
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d139      	bne.n	8001f22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2240      	movs	r2, #64	@ 0x40
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e033      	b.n	8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	@ 0x40
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2241      	movs	r2, #65	@ 0x41
 8001ec8:	2124      	movs	r1, #36	@ 0x24
 8001eca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	438a      	bics	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2241      	movs	r2, #65	@ 0x41
 8001f12:	2120      	movs	r1, #32
 8001f14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2240      	movs	r2, #64	@ 0x40
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
  }
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b004      	add	sp, #16
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	fffff0ff 	.word	0xfffff0ff

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e305      	b.n	800254e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <HAL_RCC_OscConfig+0x1e>
 8001f4c:	e08d      	b.n	800206a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f4e:	4bc5      	ldr	r3, [pc, #788]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	220c      	movs	r2, #12
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d00e      	beq.n	8001f78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5a:	4bc2      	ldr	r3, [pc, #776]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	220c      	movs	r2, #12
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x64>
 8001f66:	4bbf      	ldr	r3, [pc, #764]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	23c0      	movs	r3, #192	@ 0xc0
 8001f6c:	025b      	lsls	r3, r3, #9
 8001f6e:	401a      	ands	r2, r3
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10d      	bne.n	8001f94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	4bba      	ldr	r3, [pc, #744]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	d100      	bne.n	8001f86 <HAL_RCC_OscConfig+0x56>
 8001f84:	e070      	b.n	8002068 <HAL_RCC_OscConfig+0x138>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d000      	beq.n	8001f90 <HAL_RCC_OscConfig+0x60>
 8001f8e:	e06b      	b.n	8002068 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e2dc      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x7c>
 8001f9c:	4bb1      	ldr	r3, [pc, #708]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4bb0      	ldr	r3, [pc, #704]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	0249      	lsls	r1, r1, #9
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e02f      	b.n	800200c <HAL_RCC_OscConfig+0xdc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x9e>
 8001fb4:	4bab      	ldr	r3, [pc, #684]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4baa      	ldr	r3, [pc, #680]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fba:	49ab      	ldr	r1, [pc, #684]	@ (8002268 <HAL_RCC_OscConfig+0x338>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	4ba8      	ldr	r3, [pc, #672]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4ba7      	ldr	r3, [pc, #668]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fc6:	49a9      	ldr	r1, [pc, #676]	@ (800226c <HAL_RCC_OscConfig+0x33c>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e01e      	b.n	800200c <HAL_RCC_OscConfig+0xdc>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xc4>
 8001fd6:	4ba3      	ldr	r3, [pc, #652]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4ba2      	ldr	r3, [pc, #648]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	02c9      	lsls	r1, r1, #11
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4b9f      	ldr	r3, [pc, #636]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b9e      	ldr	r3, [pc, #632]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fea:	2180      	movs	r1, #128	@ 0x80
 8001fec:	0249      	lsls	r1, r1, #9
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xdc>
 8001ff4:	4b9b      	ldr	r3, [pc, #620]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b9a      	ldr	r3, [pc, #616]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8001ffa:	499b      	ldr	r1, [pc, #620]	@ (8002268 <HAL_RCC_OscConfig+0x338>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	4b98      	ldr	r3, [pc, #608]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b97      	ldr	r3, [pc, #604]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002006:	4999      	ldr	r1, [pc, #612]	@ (800226c <HAL_RCC_OscConfig+0x33c>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d014      	beq.n	800203e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ff24 	bl	8000e60 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201e:	f7fe ff1f 	bl	8000e60 <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	@ 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e28e      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002030:	4b8c      	ldr	r3, [pc, #560]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	029b      	lsls	r3, r3, #10
 8002038:	4013      	ands	r3, r2
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0xee>
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe ff0f 	bl	8000e60 <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe ff0a 	bl	8000e60 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	@ 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e279      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	4013      	ands	r3, r2
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x118>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d100      	bne.n	8002076 <HAL_RCC_OscConfig+0x146>
 8002074:	e06c      	b.n	8002150 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002076:	4b7b      	ldr	r3, [pc, #492]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	220c      	movs	r2, #12
 800207c:	4013      	ands	r3, r2
 800207e:	d00e      	beq.n	800209e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002080:	4b78      	ldr	r3, [pc, #480]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	220c      	movs	r2, #12
 8002086:	4013      	ands	r3, r2
 8002088:	2b08      	cmp	r3, #8
 800208a:	d11f      	bne.n	80020cc <HAL_RCC_OscConfig+0x19c>
 800208c:	4b75      	ldr	r3, [pc, #468]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	23c0      	movs	r3, #192	@ 0xc0
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	401a      	ands	r2, r3
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	429a      	cmp	r2, r3
 800209c:	d116      	bne.n	80020cc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b71      	ldr	r3, [pc, #452]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2202      	movs	r2, #2
 80020a4:	4013      	ands	r3, r2
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_OscConfig+0x184>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e24c      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	22f8      	movs	r2, #248	@ 0xf8
 80020ba:	4393      	bics	r3, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00da      	lsls	r2, r3, #3
 80020c4:	4b67      	ldr	r3, [pc, #412]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e041      	b.n	8002150 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d024      	beq.n	800211e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b63      	ldr	r3, [pc, #396]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b62      	ldr	r3, [pc, #392]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80020da:	2101      	movs	r1, #1
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe febe 	bl	8000e60 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ea:	f7fe feb9 	bl	8000e60 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e228      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2202      	movs	r2, #2
 8002102:	4013      	ands	r3, r2
 8002104:	d0f1      	beq.n	80020ea <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4b57      	ldr	r3, [pc, #348]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	22f8      	movs	r2, #248	@ 0xf8
 800210c:	4393      	bics	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	00da      	lsls	r2, r3, #3
 8002116:	4b53      	ldr	r3, [pc, #332]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e018      	b.n	8002150 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b51      	ldr	r3, [pc, #324]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002124:	2101      	movs	r1, #1
 8002126:	438a      	bics	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7fe fe99 	bl	8000e60 <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002134:	f7fe fe94 	bl	8000e60 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e203      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d1f1      	bne.n	8002134 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2208      	movs	r2, #8
 8002156:	4013      	ands	r3, r2
 8002158:	d036      	beq.n	80021c8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d019      	beq.n	8002196 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b40      	ldr	r3, [pc, #256]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002166:	4b3f      	ldr	r3, [pc, #252]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002168:	2101      	movs	r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe fe77 	bl	8000e60 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe fe72 	bl	8000e60 <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1e1      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d0f1      	beq.n	8002178 <HAL_RCC_OscConfig+0x248>
 8002194:	e018      	b.n	80021c8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002196:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800219a:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 800219c:	2101      	movs	r1, #1
 800219e:	438a      	bics	r2, r1
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fe5d 	bl	8000e60 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ac:	f7fe fe58 	bl	8000e60 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1c7      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021be:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d1f1      	bne.n	80021ac <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2204      	movs	r2, #4
 80021ce:	4013      	ands	r3, r2
 80021d0:	d100      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2a4>
 80021d2:	e0b5      	b.n	8002340 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d4:	201f      	movs	r0, #31
 80021d6:	183b      	adds	r3, r7, r0
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021dc:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	055b      	lsls	r3, r3, #21
 80021e4:	4013      	ands	r3, r2
 80021e6:	d110      	bne.n	800220a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80021ee:	2180      	movs	r1, #128	@ 0x80
 80021f0:	0549      	lsls	r1, r1, #21
 80021f2:	430a      	orrs	r2, r1
 80021f4:	61da      	str	r2, [r3, #28]
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	055b      	lsls	r3, r3, #21
 80021fe:	4013      	ands	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002204:	183b      	adds	r3, r7, r0
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_RCC_OscConfig+0x340>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d11a      	bne.n	800224c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <HAL_RCC_OscConfig+0x340>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_RCC_OscConfig+0x340>)
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	0049      	lsls	r1, r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002224:	f7fe fe1c 	bl	8000e60 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fe17 	bl	8000e60 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	@ 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e186      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_RCC_OscConfig+0x340>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4013      	ands	r3, r2
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10f      	bne.n	8002274 <HAL_RCC_OscConfig+0x344>
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 8002256:	6a1a      	ldr	r2, [r3, #32]
 8002258:	4b02      	ldr	r3, [pc, #8]	@ (8002264 <HAL_RCC_OscConfig+0x334>)
 800225a:	2101      	movs	r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	621a      	str	r2, [r3, #32]
 8002260:	e036      	b.n	80022d0 <HAL_RCC_OscConfig+0x3a0>
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	40021000 	.word	0x40021000
 8002268:	fffeffff 	.word	0xfffeffff
 800226c:	fffbffff 	.word	0xfffbffff
 8002270:	40007000 	.word	0x40007000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x366>
 800227c:	4bb6      	ldr	r3, [pc, #728]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	4bb5      	ldr	r3, [pc, #724]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002282:	2101      	movs	r1, #1
 8002284:	438a      	bics	r2, r1
 8002286:	621a      	str	r2, [r3, #32]
 8002288:	4bb3      	ldr	r3, [pc, #716]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	4bb2      	ldr	r3, [pc, #712]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800228e:	2104      	movs	r1, #4
 8002290:	438a      	bics	r2, r1
 8002292:	621a      	str	r2, [r3, #32]
 8002294:	e01c      	b.n	80022d0 <HAL_RCC_OscConfig+0x3a0>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x388>
 800229e:	4bae      	ldr	r3, [pc, #696]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	4bad      	ldr	r3, [pc, #692]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022a4:	2104      	movs	r1, #4
 80022a6:	430a      	orrs	r2, r1
 80022a8:	621a      	str	r2, [r3, #32]
 80022aa:	4bab      	ldr	r3, [pc, #684]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	4baa      	ldr	r3, [pc, #680]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	430a      	orrs	r2, r1
 80022b4:	621a      	str	r2, [r3, #32]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0x3a0>
 80022b8:	4ba7      	ldr	r3, [pc, #668]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	4ba6      	ldr	r3, [pc, #664]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022be:	2101      	movs	r1, #1
 80022c0:	438a      	bics	r2, r1
 80022c2:	621a      	str	r2, [r3, #32]
 80022c4:	4ba4      	ldr	r3, [pc, #656]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022c6:	6a1a      	ldr	r2, [r3, #32]
 80022c8:	4ba3      	ldr	r3, [pc, #652]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022ca:	2104      	movs	r1, #4
 80022cc:	438a      	bics	r2, r1
 80022ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d014      	beq.n	8002302 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7fe fdc2 	bl	8000e60 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	e009      	b.n	80022f6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7fe fdbd 	bl	8000e60 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	4a9b      	ldr	r2, [pc, #620]	@ (800255c <HAL_RCC_OscConfig+0x62c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e12b      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	4b98      	ldr	r3, [pc, #608]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3b2>
 8002300:	e013      	b.n	800232a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe fdad 	bl	8000e60 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230a:	e009      	b.n	8002320 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7fe fda8 	bl	8000e60 <HAL_GetTick>
 8002310:	0002      	movs	r2, r0
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	4a91      	ldr	r2, [pc, #580]	@ (800255c <HAL_RCC_OscConfig+0x62c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e116      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	4b8d      	ldr	r3, [pc, #564]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800232a:	231f      	movs	r3, #31
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002334:	4b88      	ldr	r3, [pc, #544]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	4b87      	ldr	r3, [pc, #540]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800233a:	4989      	ldr	r1, [pc, #548]	@ (8002560 <HAL_RCC_OscConfig+0x630>)
 800233c:	400a      	ands	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2210      	movs	r2, #16
 8002346:	4013      	ands	r3, r2
 8002348:	d063      	beq.n	8002412 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d12a      	bne.n	80023a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002352:	4b81      	ldr	r3, [pc, #516]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002356:	4b80      	ldr	r3, [pc, #512]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002358:	2104      	movs	r1, #4
 800235a:	430a      	orrs	r2, r1
 800235c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800235e:	4b7e      	ldr	r3, [pc, #504]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002362:	4b7d      	ldr	r3, [pc, #500]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002364:	2101      	movs	r1, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7fe fd79 	bl	8000e60 <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002374:	f7fe fd74 	bl	8000e60 <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0e3      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002386:	4b74      	ldr	r3, [pc, #464]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238a:	2202      	movs	r2, #2
 800238c:	4013      	ands	r3, r2
 800238e:	d0f1      	beq.n	8002374 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002390:	4b71      	ldr	r3, [pc, #452]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002394:	22f8      	movs	r2, #248	@ 0xf8
 8002396:	4393      	bics	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	00da      	lsls	r2, r3, #3
 80023a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023a6:	e034      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	3305      	adds	r3, #5
 80023ae:	d111      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023b0:	4b69      	ldr	r3, [pc, #420]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b4:	4b68      	ldr	r3, [pc, #416]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023b6:	2104      	movs	r1, #4
 80023b8:	438a      	bics	r2, r1
 80023ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023bc:	4b66      	ldr	r3, [pc, #408]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c0:	22f8      	movs	r2, #248	@ 0xf8
 80023c2:	4393      	bics	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	00da      	lsls	r2, r3, #3
 80023cc:	4b62      	ldr	r3, [pc, #392]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023d2:	e01e      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023d4:	4b60      	ldr	r3, [pc, #384]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023da:	2104      	movs	r1, #4
 80023dc:	430a      	orrs	r2, r1
 80023de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	438a      	bics	r2, r1
 80023ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7fe fd38 	bl	8000e60 <HAL_GetTick>
 80023f0:	0003      	movs	r3, r0
 80023f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023f6:	f7fe fd33 	bl	8000e60 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0a2      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002408:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800240a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240c:	2202      	movs	r2, #2
 800240e:	4013      	ands	r3, r2
 8002410:	d1f1      	bne.n	80023f6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d100      	bne.n	800241c <HAL_RCC_OscConfig+0x4ec>
 800241a:	e097      	b.n	800254c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241c:	4b4e      	ldr	r3, [pc, #312]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	220c      	movs	r2, #12
 8002422:	4013      	ands	r3, r2
 8002424:	2b08      	cmp	r3, #8
 8002426:	d100      	bne.n	800242a <HAL_RCC_OscConfig+0x4fa>
 8002428:	e06b      	b.n	8002502 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d14c      	bne.n	80024cc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b49      	ldr	r3, [pc, #292]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b48      	ldr	r3, [pc, #288]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002438:	494a      	ldr	r1, [pc, #296]	@ (8002564 <HAL_RCC_OscConfig+0x634>)
 800243a:	400a      	ands	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7fe fd0f 	bl	8000e60 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fd0a 	bl	8000e60 <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e079      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	4b3f      	ldr	r3, [pc, #252]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	049b      	lsls	r3, r3, #18
 8002462:	4013      	ands	r3, r2
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002466:	4b3c      	ldr	r3, [pc, #240]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246a:	220f      	movs	r2, #15
 800246c:	4393      	bics	r3, r2
 800246e:	0019      	movs	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002474:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002476:	430a      	orrs	r2, r1
 8002478:	62da      	str	r2, [r3, #44]	@ 0x2c
 800247a:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4a3a      	ldr	r2, [pc, #232]	@ (8002568 <HAL_RCC_OscConfig+0x638>)
 8002480:	4013      	ands	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	431a      	orrs	r2, r3
 800248e:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	0449      	lsls	r1, r1, #17
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fcdd 	bl	8000e60 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fcd8 	bl	8000e60 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e047      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024be:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	049b      	lsls	r3, r3, #18
 80024c6:	4013      	ands	r3, r2
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x57c>
 80024ca:	e03f      	b.n	800254c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80024d2:	4924      	ldr	r1, [pc, #144]	@ (8002564 <HAL_RCC_OscConfig+0x634>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fcc2 	bl	8000e60 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe fcbd 	bl	8000e60 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e02c      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	049b      	lsls	r3, r3, #18
 80024fc:	4013      	ands	r3, r2
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5b2>
 8002500:	e024      	b.n	800254c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e01f      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002514:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <HAL_RCC_OscConfig+0x628>)
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	23c0      	movs	r3, #192	@ 0xc0
 800251e:	025b      	lsls	r3, r3, #9
 8002520:	401a      	ands	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	429a      	cmp	r2, r3
 8002528:	d10e      	bne.n	8002548 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	220f      	movs	r2, #15
 800252e:	401a      	ands	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	23f0      	movs	r3, #240	@ 0xf0
 800253c:	039b      	lsls	r3, r3, #14
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b008      	add	sp, #32
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	40021000 	.word	0x40021000
 800255c:	00001388 	.word	0x00001388
 8002560:	efffffff 	.word	0xefffffff
 8002564:	feffffff 	.word	0xfeffffff
 8002568:	ffc27fff 	.word	0xffc27fff

0800256c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0b3      	b.n	80026e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b5b      	ldr	r3, [pc, #364]	@ (80026f0 <HAL_RCC_ClockConfig+0x184>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2201      	movs	r2, #1
 8002586:	4013      	ands	r3, r2
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d911      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b58      	ldr	r3, [pc, #352]	@ (80026f0 <HAL_RCC_ClockConfig+0x184>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	4393      	bics	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	4b55      	ldr	r3, [pc, #340]	@ (80026f0 <HAL_RCC_ClockConfig+0x184>)
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_ClockConfig+0x184>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2201      	movs	r2, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e09a      	b.n	80026e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	d015      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2204      	movs	r2, #4
 80025c2:	4013      	ands	r3, r2
 80025c4:	d006      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025c6:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 80025cc:	21e0      	movs	r1, #224	@ 0xe0
 80025ce:	00c9      	lsls	r1, r1, #3
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b47      	ldr	r3, [pc, #284]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	22f0      	movs	r2, #240	@ 0xf0
 80025da:	4393      	bics	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	4b44      	ldr	r3, [pc, #272]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	d040      	beq.n	8002674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b3e      	ldr	r3, [pc, #248]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	029b      	lsls	r3, r3, #10
 8002602:	4013      	ands	r3, r2
 8002604:	d114      	bne.n	8002630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06e      	b.n	80026e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	049b      	lsls	r3, r3, #18
 800261a:	4013      	ands	r3, r2
 800261c:	d108      	bne.n	8002630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e062      	b.n	80026e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e05b      	b.n	80026e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b30      	ldr	r3, [pc, #192]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2203      	movs	r2, #3
 8002636:	4393      	bics	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4b2d      	ldr	r3, [pc, #180]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 8002640:	430a      	orrs	r2, r1
 8002642:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002644:	f7fe fc0c 	bl	8000e60 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264c:	e009      	b.n	8002662 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264e:	f7fe fc07 	bl	8000e60 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <HAL_RCC_ClockConfig+0x18c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e042      	b.n	80026e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	220c      	movs	r2, #12
 8002668:	401a      	ands	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1ec      	bne.n	800264e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <HAL_RCC_ClockConfig+0x184>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d211      	bcs.n	80026a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCC_ClockConfig+0x184>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	4393      	bics	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <HAL_RCC_ClockConfig+0x184>)
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002694:	4b16      	ldr	r3, [pc, #88]	@ (80026f0 <HAL_RCC_ClockConfig+0x184>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4013      	ands	r3, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e020      	b.n	80026e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a11      	ldr	r2, [pc, #68]	@ (80026fc <HAL_RCC_ClockConfig+0x190>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026c4:	f000 f820 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c8:	0001      	movs	r1, r0
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_RCC_ClockConfig+0x188>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	220f      	movs	r2, #15
 80026d2:	4013      	ands	r3, r2
 80026d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <HAL_RCC_ClockConfig+0x194>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	000a      	movs	r2, r1
 80026da:	40da      	lsrs	r2, r3
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_RCC_ClockConfig+0x198>)
 80026de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026e0:	2003      	movs	r0, #3
 80026e2:	f7fe fb77 	bl	8000dd4 <HAL_InitTick>
  
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b004      	add	sp, #16
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	00001388 	.word	0x00001388
 80026fc:	fffff8ff 	.word	0xfffff8ff
 8002700:	080029c4 	.word	0x080029c4
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002722:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	220c      	movs	r2, #12
 800272c:	4013      	ands	r3, r2
 800272e:	2b04      	cmp	r3, #4
 8002730:	d002      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x30>
 8002732:	2b08      	cmp	r3, #8
 8002734:	d003      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x36>
 8002736:	e02e      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002738:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800273a:	613b      	str	r3, [r7, #16]
      break;
 800273c:	e02e      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	0c9b      	lsrs	r3, r3, #18
 8002742:	220f      	movs	r2, #15
 8002744:	4013      	ands	r3, r2
 8002746:	4a1a      	ldr	r2, [pc, #104]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002748:	5cd3      	ldrb	r3, [r2, r3]
 800274a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800274c:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	220f      	movs	r2, #15
 8002752:	4013      	ands	r3, r2
 8002754:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	23c0      	movs	r3, #192	@ 0xc0
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	401a      	ands	r2, r3
 8002762:	2380      	movs	r3, #128	@ 0x80
 8002764:	025b      	lsls	r3, r3, #9
 8002766:	429a      	cmp	r2, r3
 8002768:	d109      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	480f      	ldr	r0, [pc, #60]	@ (80027ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800276e:	f7fd fcc9 	bl	8000104 <__udivsi3>
 8002772:	0003      	movs	r3, r0
 8002774:	001a      	movs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4353      	muls	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e008      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	480a      	ldr	r0, [pc, #40]	@ (80027ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002782:	f7fd fcbf 	bl	8000104 <__udivsi3>
 8002786:	0003      	movs	r3, r0
 8002788:	001a      	movs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4353      	muls	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	613b      	str	r3, [r7, #16]
      break;
 8002794:	e002      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002798:	613b      	str	r3, [r7, #16]
      break;
 800279a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800279c:	693b      	ldr	r3, [r7, #16]
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b006      	add	sp, #24
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	40021000 	.word	0x40021000
 80027ac:	007a1200 	.word	0x007a1200
 80027b0:	080029d4 	.word	0x080029d4
 80027b4:	080029e4 	.word	0x080029e4

080027b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	025b      	lsls	r3, r3, #9
 80027d0:	4013      	ands	r3, r2
 80027d2:	d100      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80027d4:	e08e      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2017      	movs	r0, #23
 80027d8:	183b      	adds	r3, r7, r0
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b57      	ldr	r3, [pc, #348]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	055b      	lsls	r3, r3, #21
 80027e6:	4013      	ands	r3, r2
 80027e8:	d110      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b54      	ldr	r3, [pc, #336]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	4b53      	ldr	r3, [pc, #332]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	0549      	lsls	r1, r1, #21
 80027f4:	430a      	orrs	r2, r1
 80027f6:	61da      	str	r2, [r3, #28]
 80027f8:	4b50      	ldr	r3, [pc, #320]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	2380      	movs	r3, #128	@ 0x80
 80027fe:	055b      	lsls	r3, r3, #21
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002806:	183b      	adds	r3, r7, r0
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	4b4c      	ldr	r3, [pc, #304]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d11a      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002818:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b48      	ldr	r3, [pc, #288]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800281e:	2180      	movs	r1, #128	@ 0x80
 8002820:	0049      	lsls	r1, r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002826:	f7fe fb1b 	bl	8000e60 <HAL_GetTick>
 800282a:	0003      	movs	r3, r0
 800282c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7fe fb16 	bl	8000e60 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e077      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b3f      	ldr	r3, [pc, #252]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	2380      	movs	r3, #128	@ 0x80
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4013      	ands	r3, r2
 800284c:	d0f0      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800284e:	4b3b      	ldr	r3, [pc, #236]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002850:	6a1a      	ldr	r2, [r3, #32]
 8002852:	23c0      	movs	r3, #192	@ 0xc0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4013      	ands	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d034      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	23c0      	movs	r3, #192	@ 0xc0
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4013      	ands	r3, r2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d02c      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002870:	4b32      	ldr	r3, [pc, #200]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4a33      	ldr	r2, [pc, #204]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002876:	4013      	ands	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800287a:	4b30      	ldr	r3, [pc, #192]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	4b2f      	ldr	r3, [pc, #188]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002880:	2180      	movs	r1, #128	@ 0x80
 8002882:	0249      	lsls	r1, r1, #9
 8002884:	430a      	orrs	r2, r1
 8002886:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002888:	4b2c      	ldr	r3, [pc, #176]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800288a:	6a1a      	ldr	r2, [r3, #32]
 800288c:	4b2b      	ldr	r3, [pc, #172]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800288e:	492e      	ldr	r1, [pc, #184]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002890:	400a      	ands	r2, r1
 8002892:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002894:	4b29      	ldr	r3, [pc, #164]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe fadd 	bl	8000e60 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	e009      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fad8 	bl	8000e60 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	4a25      	ldr	r2, [pc, #148]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e038      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	4b1e      	ldr	r3, [pc, #120]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	2202      	movs	r2, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ca:	4b1c      	ldr	r3, [pc, #112]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028da:	430a      	orrs	r2, r1
 80028dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028de:	2317      	movs	r3, #23
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b14      	ldr	r3, [pc, #80]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ee:	4918      	ldr	r1, [pc, #96]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	2203      	movs	r2, #3
 8002904:	4393      	bics	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800290e:	430a      	orrs	r2, r1
 8002910:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2220      	movs	r2, #32
 8002918:	4013      	ands	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291c:	4b07      	ldr	r3, [pc, #28]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	2210      	movs	r2, #16
 8002922:	4393      	bics	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	4b04      	ldr	r3, [pc, #16]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800292c:	430a      	orrs	r2, r1
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b006      	add	sp, #24
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
 8002944:	fffffcff 	.word	0xfffffcff
 8002948:	fffeffff 	.word	0xfffeffff
 800294c:	00001388 	.word	0x00001388
 8002950:	efffffff 	.word	0xefffffff

08002954 <memset>:
 8002954:	0003      	movs	r3, r0
 8002956:	1882      	adds	r2, r0, r2
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	7019      	strb	r1, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <__libc_init_array>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	2600      	movs	r6, #0
 8002968:	4c0c      	ldr	r4, [pc, #48]	@ (800299c <__libc_init_array+0x38>)
 800296a:	4d0d      	ldr	r5, [pc, #52]	@ (80029a0 <__libc_init_array+0x3c>)
 800296c:	1b64      	subs	r4, r4, r5
 800296e:	10a4      	asrs	r4, r4, #2
 8002970:	42a6      	cmp	r6, r4
 8002972:	d109      	bne.n	8002988 <__libc_init_array+0x24>
 8002974:	2600      	movs	r6, #0
 8002976:	f000 f819 	bl	80029ac <_init>
 800297a:	4c0a      	ldr	r4, [pc, #40]	@ (80029a4 <__libc_init_array+0x40>)
 800297c:	4d0a      	ldr	r5, [pc, #40]	@ (80029a8 <__libc_init_array+0x44>)
 800297e:	1b64      	subs	r4, r4, r5
 8002980:	10a4      	asrs	r4, r4, #2
 8002982:	42a6      	cmp	r6, r4
 8002984:	d105      	bne.n	8002992 <__libc_init_array+0x2e>
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	00b3      	lsls	r3, r6, #2
 800298a:	58eb      	ldr	r3, [r5, r3]
 800298c:	4798      	blx	r3
 800298e:	3601      	adds	r6, #1
 8002990:	e7ee      	b.n	8002970 <__libc_init_array+0xc>
 8002992:	00b3      	lsls	r3, r6, #2
 8002994:	58eb      	ldr	r3, [r5, r3]
 8002996:	4798      	blx	r3
 8002998:	3601      	adds	r6, #1
 800299a:	e7f2      	b.n	8002982 <__libc_init_array+0x1e>
 800299c:	080029f4 	.word	0x080029f4
 80029a0:	080029f4 	.word	0x080029f4
 80029a4:	080029f8 	.word	0x080029f8
 80029a8:	080029f4 	.word	0x080029f4

080029ac <_init>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b2:	bc08      	pop	{r3}
 80029b4:	469e      	mov	lr, r3
 80029b6:	4770      	bx	lr

080029b8 <_fini>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029be:	bc08      	pop	{r3}
 80029c0:	469e      	mov	lr, r3
 80029c2:	4770      	bx	lr
